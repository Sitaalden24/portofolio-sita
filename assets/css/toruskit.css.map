{"version":3,"sources":["toruskit.scss","toruskit.css","_variables.scss","../bootstrap/scss/mixins/_utilities.scss","../bootstrap/scss/mixins/_breakpoints.scss","toruskit/utilities/_position.scss","toruskit/utilities/_resolution.scss","toruskit/effects/_reset.scss","toruskit/effects/_transition-types.scss","toruskit/effects/_transition-duration.scss","toruskit/effects/built-in/_background-color.scss","toruskit/effects/built-in/_block.scss","toruskit/effects/built-in/_blur.scss","toruskit/effects/built-in/_border-color.scss","toruskit/effects/built-in/_fade-opacity.scss","toruskit/effects/built-in/_mask.scss","toruskit/effects/built-in/_push-pull.scss","toruskit/effects/built-in/_reveal.scss","toruskit/effects/built-in/_shadows.scss","toruskit/effects/built-in/_text-color.scss","toruskit/effects/built-in/_rotate.scss","toruskit/loops/_reset.scss","toruskit/loops/_keyframes.scss","toruskit/loops/_variants.scss","toruskit/loops/_transitions.scss"],"names":[],"mappings":"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","file":"toruskit.css","sourcesContent":["/*!\r\n * Torus Kit v2.0 (https://toruskit.com/)\r\n * Copyright 2021 Torus Kit\r\n */\r\n\r\n@import \"./functions\";\r\n@import \"./variables\";\r\n\r\n//\r\n// ------------------------------------------------------------------------\r\n// Utilities\r\n// ------------------------------------------------------------------------\r\n//\r\n\r\n@import \"./toruskit/utilities/position\";\r\n@import \"./toruskit/utilities/resolution\";\r\n\r\n//\r\n// ------------------------------------------------------------------------\r\n// Effects\r\n// ------------------------------------------------------------------------\r\n//\r\n\r\n// Reset\r\n\r\n@import \"./toruskit/effects/reset\";\r\n\r\n// Transition types\r\n\r\n@import \"./toruskit/effects/transition-types\";\r\n@import \"./toruskit/effects/transition-duration\";\r\n\r\n// Built in effects\r\n\r\n@import \"./toruskit/effects/built-in/background-color\";\r\n@import \"./toruskit/effects/built-in/block\";\r\n@import \"./toruskit/effects/built-in/blur\";\r\n@import \"./toruskit/effects/built-in/border-color\";\r\n@import \"./toruskit/effects/built-in/fade-opacity\";\r\n@import \"./toruskit/effects/built-in/mask\";\r\n@import \"./toruskit/effects/built-in/push-pull\";\r\n@import \"./toruskit/effects/built-in/reveal\";\r\n@import \"./toruskit/effects/built-in/shadows\";\r\n@import \"./toruskit/effects/built-in/text-color\";\r\n@import \"./toruskit/effects/built-in/rotate\";\r\n\r\n//\r\n// ------------------------------------------------------------------------\r\n// Loops\r\n// ------------------------------------------------------------------------\r\n//\r\n\r\n@import \"./toruskit/loops/variables\";\r\n@import \"./toruskit/loops/reset\";\r\n@import \"./toruskit/loops/keyframes\";\r\n@import \"./toruskit/loops/variants\";\r\n@import \"./toruskit/loops/transitions\";\r\n@import \"./toruskit/loops/duration\";\r\n","/*!\r\n * Torus Kit v2.0 (https://toruskit.com/)\r\n * Copyright 2021 Torus Kit\r\n */\n:root {\n  --tor-predefined-values:  blue,indigo,purple,pink,red,orange,yellow,green,teal,cyan,white,gray,gray-dark,navy,maroon,brown,magenta,lime,black,primary,secondary,success,info,warning,danger,light,dark,no,xs,sm,md,lg,xl,full,half,risen,pop,fastest,faster,fast,slow,slower,slowest;\n}\n\n.position-absolute {\n  position: absolute !important;\n}\n\n.position-relative {\n  position: relative !important;\n}\n\n.position-fixed {\n  position: fixed !important;\n}\n\n@media (min-width: 576px) {\n  .position-sm-absolute {\n    position: absolute !important;\n  }\n  .position-sm-relative {\n    position: relative !important;\n  }\n  .position-sm-fixed {\n    position: fixed !important;\n  }\n}\n\n@media (min-width: 768px) {\n  .position-md-absolute {\n    position: absolute !important;\n  }\n  .position-md-relative {\n    position: relative !important;\n  }\n  .position-md-fixed {\n    position: fixed !important;\n  }\n}\n\n@media (min-width: 992px) {\n  .position-lg-absolute {\n    position: absolute !important;\n  }\n  .position-lg-relative {\n    position: relative !important;\n  }\n  .position-lg-fixed {\n    position: fixed !important;\n  }\n}\n\n@media (min-width: 1200px) {\n  .position-xl-absolute {\n    position: absolute !important;\n  }\n  .position-xl-relative {\n    position: relative !important;\n  }\n  .position-xl-fixed {\n    position: fixed !important;\n  }\n}\n\n@media (min-width: 1400px) {\n  .position-xxl-absolute {\n    position: absolute !important;\n  }\n  .position-xxl-relative {\n    position: relative !important;\n  }\n  .position-xxl-fixed {\n    position: fixed !important;\n  }\n}\n\n.position-fixed {\n  position: fixed !important;\n}\n\n[data-tor] {\n  --tor-top: auto;\n  --tor-right: auto;\n  --tor-bottom: auto;\n  --tor-left: auto;\n  --tor-shift-x: 0%;\n  --tor-shift-y: 0%;\n  --tor-add-shift-x: 0%;\n  --tor-add-shift-y: 0%;\n}\n\n[data-tor~=\"top\"] {\n  --tor-top: 0;\n}\n\n[data-tor~=\"bottom\"] {\n  --tor-bottom: 0;\n}\n\n[data-tor~=\"left\"] {\n  --tor-left: 0;\n}\n\n[data-tor~=\"right\"] {\n  --tor-right: 0;\n}\n\n[data-tor~=\"middle\"] {\n  --tor-top: 50%;\n  --tor-shift-y: -50% !important;\n}\n\n[data-tor~=\"center\"] {\n  --tor-left: 50%;\n  --tor-shift-x: -50% !important;\n}\n\n[data-tor] {\n  top: var(--tor-top);\n  right: var(--tor-right);\n  bottom: var(--tor-bottom);\n  left: var(--tor-left);\n  --tor-moveX: calc(var(--tor-shift-x, 0) + var(--tor-add-shift-x, 0)) !important;\n  --tor-moveY: calc(var(--tor-shift-y, 0) + var(--tor-add-shift-y, 0)) !important;\n}\n\n[data-tor~=\"middle\"]:not([data-fx]),\n[data-tor~=\"center\"]:not([data-fx]) {\n  transform: translateX(var(--tor-moveX)) translateY(var(--tor-moveY)) !important;\n}\n\n[data-tor-push] {\n  --tor-push-x: 0%;\n  --tor-push-y: 0%;\n}\n\n[data-tor-push*=\"up\"] {\n  --tor-push-y-direction: -1;\n}\n\n[data-tor-push*=\"left\"] {\n  --tor-push-x-direction: -1;\n}\n\n[data-tor-push] {\n  --tor-moveX: calc( (var(--tor-push-x, 0%) * var(--tor-push-x-direction, 1)) + var(--tor-shift-x, 0%) ) !important;\n  --tor-moveY: calc( (var(--tor-push-y, 0%) * var(--tor-push-y-direction, 1)) + var(--tor-shift-y, 0%) ) !important;\n}\n\n[data-tor-push]:not([data-tor-fx]) {\n  transform: translateX(var(--tor-moveX)) translateY(var(--tor-moveY)) !important;\n}\n\n:root {\n  --tor-resolutions: \"xxl:1400px\", \"xl:1200px\", \"lg:992px\", \"md:768px\", \"sm:576px\", \"all:0px\";\n}\n\n[data-tor] {\n  --tor-wait: 0ms;\n  --tor-delay: 0ms;\n  --tor-duration: 350ms;\n  --tor-speed: 1;\n  --tor-timing: cubic-bezier(0.35, 0, 0.1, 1);\n  --tor-duration-all: calc( var(--tor-duration, 350ms) * var(--tor-speed) );\n  --tor-timing-all: var(--tor-timing);\n  --tor-delay-all: calc( var(--tor-wait, 0ms) + var(--tor-delay, 0ms) );\n  --tor-property-all: all;\n  --tor-originX: center;\n  --tor-originY: center;\n  --tor-originZ: 0px;\n  transition-property: var(--tor-property-all);\n  transition-timing-function: var(--tor-timing-all);\n  transition-duration: var(--tor-duration-all);\n  transition-delay: var(--tor-delay-all);\n  transform-origin: var(--tor-originX) var(--tor-originY) var(--tor-originZ);\n}\n\n[data-tor*=\"z-level\"],\n[data-tor*=\"push.\"],\n[data-tor*=\"pull.\"],\n[data-tor*=\"translate\"],\n[data-tor*=\"rotate\"],\n[data-tor*=\"scale\"],\n[data-tor*=\"skew\"],\n[data-tor*=\"reveal\"] {\n  --tor-scaleX: initial;\n  --tor-scaleY: initial;\n  --tor-skewX: initial;\n  --tor-skewY: initial;\n  --tor-rotate: initial;\n  --tor-rotateX: initial;\n  --tor-rotateY: initial;\n  --tor-translateX: initial;\n  --tor-translateY: initial;\n  --tor-translateZ: initial;\n  --tor-moveX: initial;\n  --tor-moveY: initial;\n  --tor-z-level: initial;\n  --tor-perspective-self: initial;\n  transform: perspective(var(--tor-perspective-self, 0px)) scale3d(var(--tor-scaleX, var(--tor-scale, 1)), var(--tor-scaleY, var(--tor-scale, 1)), 1) translate3d(calc( var(--tor-translateX, 0%) + var(--tor-moveX, 0%)), calc( var(--tor-translateY, 0%) + var(--tor-moveY, 0%)), calc( var(--tor-translateZ, 0px) + var(--tor-z-level, 0px) + var(--moz-opacity-fix, 0px))) rotateX(var(--tor-rotateX, 0deg)) rotateY(var(--tor-rotateY, 0deg)) rotateZ(var(--tor-rotate, 0deg)) skew(var(--tor-skewX, var(--tor-skew, 0deg)), var(--tor-skewY, var(--tor-skewY, 0deg)));\n}\n\n[data-tor*=\"scroll:\"],\n[data-tor*=\"mouse:\"],\n[data-tor*=\"mouseX:\"],\n[data-tor*=\"mouseY:\"],\n[data-tor*=\"sensor:\"],\n[data-tor*=\"sensorX:\"],\n[data-tor*=\"sensorY:\"] {\n  transition: none;\n}\n\n[data-tor~=\"origin.left\"] {\n  --tor-originX: left;\n}\n\n[data-tor~=\"origin.right\"] {\n  --tor-originX: right;\n}\n\n[data-tor~=\"origin.top\"] {\n  --tor-originY: top;\n}\n\n[data-tor~=\"origin.bottom\"] {\n  --tor-originY: bottom;\n}\n\nsvg [data-tor] {\n  transform-box: fill-box;\n}\n\n[data-tor*=\":rotate.\"] > .tor-hit-area,\n[data-tor*=\":pull.\"] > .tor-hit-area,\n[data-tor*=\":push.\"] > .tor-hit-area {\n  content: \"\";\n  position: absolute;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  transform: translateX(calc(var(--tor-translateX, 0%) * -1)) translateY(calc(var(--tor-translateY, 0%) * -1));\n  transition: inherit;\n  pointer-events: none;\n  z-index: -1;\n}\n\n[data-tor*=\":rotate.\"]:hover > .tor-hit-area,\n[data-tor*=\":pull.\"]:hover > .tor-hit-area,\n[data-tor*=\":push.\"]:hover > .tor-hit-area {\n  transition: inherit;\n  pointer-events: auto;\n}\n\n[data-tor*=\":push.\"]:hover > .tor-hit-area,\n[data-tor*=\":pull.\"]:hover > .tor-hit-area {\n  height: calc(var(--tor-translateY, 100%) * var(--tor-hitY-calc, 1) + 100%);\n  width: calc(var(--tor-translateX, 100%) * var(--tor-hitX-calc, 1) + 100%);\n}\n\n[data-tor*=\":push.up\"] > .tor-hit-area,\n[data-tor*=\":pull.up\"] > .tor-hit-area {\n  bottom: 0;\n  --tor-hitY-calc: -1;\n}\n\n[data-tor*=\":push.down\"] > .tor-hit-area,\n[data-tor*=\":pull.down\"] > .tor-hit-area {\n  top: 0;\n}\n\n[data-tor*=\":push.left\"] > .tor-hit-area,\n[data-tor*=\":pull.left\"] > .tor-hit-area {\n  left: initial;\n  right: 0;\n  --tor-hitX-calc: -1;\n}\n\n.transition-unset {\n  transition: unset !important;\n}\n\n.tor-hidden {\n  visibility: hidden !important;\n}\n\n[data-tor-parent~=\"inview\"]:not(.inview) [data-tor*=\"inview(\"],\n[data-tor*=\"inview:\"]:not(.inview) {\n  transition: none !important;\n}\n\nspan[data-tor] {\n  display: inline-block;\n}\n\n.perspective {\n  perspective: 1000px;\n}\n\n.perspective [data-fx] {\n  --perspective-c: 0;\n}\n\n.preserve-3d {\n  transform-style: preserve-3d;\n}\n\n[data-fx~=\"backface-hidden\"],\n.backface-hidden {\n  backface-visibility: hidden;\n}\n\n.no-transform,\n[data-fx~=\"no-transform\"] {\n  transform: none !important;\n}\n\n.tr-none {\n  transition: none !important;\n}\n\n@-moz-document url-prefix() {\n  [data-tor*=\"@transform\"],\n  [data-tor*=\"reveal\"],\n  [data-tor*=\"rotate\"],\n  [data-tor*=\"rotate\"] .tor-flip-front,\n  [data-tor*=\"rotate\"] .tor-flip-back {\n    outline: 1px solid transparent;\n  }\n  [data-tor*=\"scale\"],\n  [data-tor*=\"pull\"],\n  [data-tor*=\"push\"] {\n    transform-style: preserve-3d;\n    backface-visibility: hidden;\n  }\n  img[data-tor*=\"scale\"],\n  img[data-tor*=\"pull\"],\n  img[data-tor*=\"push\"] {\n    rotate: 0deg;\n    image-rendering: optimizeQuality;\n  }\n  svg[data-tor] {\n    outline: none;\n    rotate: 0;\n  }\n  svg [data-tor] {\n    rotate: 0.02deg;\n    will-change: transform;\n  }\n}\n\n[data-tor~=\"quad\"] {\n  transition-duration: 450ms !important;\n  transition-timing-function: cubic-bezier(0.23, 0, 0, 1) !important;\n}\n\n[data-tor~=\"exponential\"] {\n  transition-duration: 600ms !important;\n  transition-timing-function: cubic-bezier(0.9, 0, 0.1, 1) !important;\n}\n\n[data-tor~=\"bounce\"] {\n  transition-duration: 500ms !important;\n  transition-timing-function: cubic-bezier(0.4, 0, 0, 1.4) !important;\n}\n\n[data-tor~=\"bounce-exponential\"] {\n  transition-duration: 600ms !important;\n  transition-timing-function: cubic-bezier(0.9, 0, 0, 1.3) !important;\n}\n\n[data-tor~=\"linear\"] {\n  transition-duration: 350ms !important;\n  transition-timing-function: linear !important;\n}\n\n[data-tor~=\"ease-out\"] {\n  transition-duration: 700ms !important;\n  transition-timing-function: cubic-bezier(0, 0.2, 0.15, 1) !important;\n}\n\n[data-tor~=\"fastest\"] {\n  --tor-speed: 0.45;\n}\n\n[data-tor~=\"faster\"] {\n  --tor-speed: 0.6;\n}\n\n[data-tor~=\"fast\"] {\n  --tor-speed: 0.85;\n}\n\n[data-tor~=\"slow\"] {\n  --tor-speed: 2;\n}\n\n[data-tor~=\"slower\"] {\n  --tor-speed: 3;\n}\n\n[data-tor~=\"slowest\"] {\n  --tor-speed: 4;\n}\n\n[data-tor*=\"loop:\"] {\n  --tor-fastest: 0.45;\n  --tor-faster: 0.6;\n  --tor-fast: 0.85;\n  --tor-slow: 2;\n  --tor-slower: 3;\n  --tor-slowest: 4;\n}\n\n[data-tor*=\"bg(\"] {\n  --tor-bg-opacity: 1;\n  --tor-bg-lightness: 1;\n  --tor-bg-blue: hsla(230, 100%, calc(56% * var(--tor-bg-lightness, 1)), var(--tor-bg-opacity, 1));\n  --tor-bg-indigo: hsla(263, 90%, calc(51% * var(--tor-bg-lightness, 1)), var(--tor-bg-opacity, 1));\n  --tor-bg-purple: hsla(261, 51%, calc(51% * var(--tor-bg-lightness, 1)), var(--tor-bg-opacity, 1));\n  --tor-bg-pink: hsla(330, 67%, calc(52% * var(--tor-bg-lightness, 1)), var(--tor-bg-opacity, 1));\n  --tor-bg-red: hsla(354, 70%, calc(54% * var(--tor-bg-lightness, 1)), var(--tor-bg-opacity, 1));\n  --tor-bg-orange: hsla(27, 98%, calc(54% * var(--tor-bg-lightness, 1)), var(--tor-bg-opacity, 1));\n  --tor-bg-yellow: hsla(45, 100%, calc(51% * var(--tor-bg-lightness, 1)), var(--tor-bg-opacity, 1));\n  --tor-bg-green: hsla(152, 69%, calc(31% * var(--tor-bg-lightness, 1)), var(--tor-bg-opacity, 1));\n  --tor-bg-teal: hsla(162, 73%, calc(46% * var(--tor-bg-lightness, 1)), var(--tor-bg-opacity, 1));\n  --tor-bg-cyan: hsla(190, 90%, calc(50% * var(--tor-bg-lightness, 1)), var(--tor-bg-opacity, 1));\n  --tor-bg-white: hsla(0, 0%, calc(100% * var(--tor-bg-lightness, 1)), var(--tor-bg-opacity, 1));\n  --tor-bg-gray: hsla(210, 14%, calc(83% * var(--tor-bg-lightness, 1)), var(--tor-bg-opacity, 1));\n  --tor-bg-gray-dark: hsla(210, 10%, calc(23% * var(--tor-bg-lightness, 1)), var(--tor-bg-opacity, 1));\n  --tor-bg-navy: hsla(210, 100%, calc(12% * var(--tor-bg-lightness, 1)), var(--tor-bg-opacity, 1));\n  --tor-bg-maroon: hsla(331, 74%, calc(30% * var(--tor-bg-lightness, 1)), var(--tor-bg-opacity, 1));\n  --tor-bg-brown: hsla(28, 28%, calc(39% * var(--tor-bg-lightness, 1)), var(--tor-bg-opacity, 1));\n  --tor-bg-magenta: hsla(314, 88%, calc(51% * var(--tor-bg-lightness, 1)), var(--tor-bg-opacity, 1));\n  --tor-bg-lime: hsla(146, 100%, calc(50% * var(--tor-bg-lightness, 1)), var(--tor-bg-opacity, 1));\n  --tor-bg-black: hsla(0, 0%, calc(0% * var(--tor-bg-lightness, 1)), var(--tor-bg-opacity, 1));\n  --tor-bg-primary: hsla(230, 100%, calc(56% * var(--tor-bg-lightness, 1)), var(--tor-bg-opacity, 1));\n  --tor-bg-secondary: hsla(208, 7%, calc(46% * var(--tor-bg-lightness, 1)), var(--tor-bg-opacity, 1));\n  --tor-bg-success: hsla(152, 69%, calc(31% * var(--tor-bg-lightness, 1)), var(--tor-bg-opacity, 1));\n  --tor-bg-info: hsla(190, 90%, calc(50% * var(--tor-bg-lightness, 1)), var(--tor-bg-opacity, 1));\n  --tor-bg-warning: hsla(45, 100%, calc(51% * var(--tor-bg-lightness, 1)), var(--tor-bg-opacity, 1));\n  --tor-bg-danger: hsla(354, 70%, calc(54% * var(--tor-bg-lightness, 1)), var(--tor-bg-opacity, 1));\n  --tor-bg-light: hsla(210, 17%, calc(98% * var(--tor-bg-lightness, 1)), var(--tor-bg-opacity, 1));\n  --tor-bg-dark: hsla(210, 10%, calc(23% * var(--tor-bg-lightness, 1)), var(--tor-bg-opacity, 1));\n  --tor-bg-transparent: transparent;\n}\n\n[data-tor*=\"bg-lighten(\"] {\n  --tor-bg-lighten-xs: 1.1;\n  --tor-bg-lighten-sm: 1.2;\n  --tor-bg-lighten-md: 1.3;\n  --tor-bg-lighten-lg: 1.4;\n  --tor-bg-lighten-xl: 1.5;\n}\n\n[data-tor*=\"bg-darken(\"] {\n  --tor-bg-darken-xs: 0.9;\n  --tor-bg-darken-sm: 0.8;\n  --tor-bg-darken-md: 0.7;\n  --tor-bg-darken-lg: 0.6;\n  --tor-bg-darken-xl: 0.5;\n}\n\n[data-tor*=\"block(\"] {\n  --tor-block: inset(0% 0% 0% 0%);\n  --tor-block-scale: var(--tor-block-scale-idle);\n  --tor-clip-delay: var(--tor-delay-all, 0ms);\n  --tor-block-delay: calc(var(--tor-duration-all) + var(--tor-delay-all, 0ms));\n  clip-path: var(--tor-block);\n  contain: paint;\n  transform-style: preserve-3d;\n  will-change: clip-path, transform;\n  position: relative;\n  transition-delay: var(--tor-clip-delay) !important;\n  visibility: visible;\n}\n\n@-moz-document url-prefix() {\n  [data-tor*=\"block(\"] {\n    filter: drop-shadow(0 0 0 transparent);\n  }\n}\n\n[data-tor*=\"block(\"]:before {\n  background-color: var(--tor-block-bg, #000);\n  content: \"\";\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: 100%;\n  transform: var(--tor-block-scale);\n  transition-delay: var(--tor-block-delay);\n  transition-duration: var(--tor-duration-all);\n  transition-timing-function: inherit;\n  transform-origin: var(--tor-block-origin);\n  transition-property: transform;\n  z-index: 1;\n}\n\n[data-tor*=\":block(right\"],\n[data-tor*=\":block(left\"] {\n  --tor-block-scale: scaleX(0);\n  --tor-block-scale-idle: scaleX(1);\n}\n\n[data-tor*=\":block(up\"],\n[data-tor*=\":block(down\"] {\n  --tor-block-scale: scaleY(0);\n  --tor-block-scale-idle: scaleY(1);\n}\n\n[data-tor*=\":block(right\"] {\n  --tor-block-origin: right;\n  --tor-block-idle: inset(0% 100% 0% 0%);\n}\n\n[data-tor*=\":block(left\"] {\n  --tor-block-origin: left;\n  --tor-block-idle: inset(0% 0% 0% 100%);\n}\n\n[data-tor*=\":block(up\"] {\n  --tor-block-origin: top;\n  --tor-block-idle: inset(100% 0% 0% 0%);\n}\n\n[data-tor*=\":block(down\"] {\n  --tor-block-origin: bottom;\n  --tor-block-idle: inset(0% 0% 100% 0%);\n}\n\n[data-tor*=\"blur(\"],\n[data-tor*=\"blur.\"] {\n  filter: blur(var(--tor-blur, 0));\n  --tor-blur-no: 0rem;\n  --tor-blur-xs: 0.25rem;\n  --tor-blur-sm: 0.5rem;\n  --tor-blur-md: 1rem;\n  --tor-blur-lg: 2rem;\n  --tor-blur-xl: 4rem;\n}\n\n[data-tor*=\"border(\"] {\n  --tor-border-blue: hsla(230, 100%, 56%, var(--tor-border-opacity, 1));\n  --tor-border-indigo: hsla(263, 90%, 51%, var(--tor-border-opacity, 1));\n  --tor-border-purple: hsla(261, 51%, 51%, var(--tor-border-opacity, 1));\n  --tor-border-pink: hsla(330, 67%, 52%, var(--tor-border-opacity, 1));\n  --tor-border-red: hsla(354, 70%, 54%, var(--tor-border-opacity, 1));\n  --tor-border-orange: hsla(27, 98%, 54%, var(--tor-border-opacity, 1));\n  --tor-border-yellow: hsla(45, 100%, 51%, var(--tor-border-opacity, 1));\n  --tor-border-green: hsla(152, 69%, 31%, var(--tor-border-opacity, 1));\n  --tor-border-teal: hsla(162, 73%, 46%, var(--tor-border-opacity, 1));\n  --tor-border-cyan: hsla(190, 90%, 50%, var(--tor-border-opacity, 1));\n  --tor-border-white: hsla(0, 0%, 100%, var(--tor-border-opacity, 1));\n  --tor-border-gray: hsla(210, 14%, 83%, var(--tor-border-opacity, 1));\n  --tor-border-gray-dark: hsla(210, 10%, 23%, var(--tor-border-opacity, 1));\n  --tor-border-navy: hsla(210, 100%, 12%, var(--tor-border-opacity, 1));\n  --tor-border-maroon: hsla(331, 74%, 30%, var(--tor-border-opacity, 1));\n  --tor-border-brown: hsla(28, 28%, 39%, var(--tor-border-opacity, 1));\n  --tor-border-magenta: hsla(314, 88%, 51%, var(--tor-border-opacity, 1));\n  --tor-border-lime: hsla(146, 100%, 50%, var(--tor-border-opacity, 1));\n  --tor-border-black: hsla(0, 0%, 0%, var(--tor-border-opacity, 1));\n  --tor-border-primary: hsla(230, 100%, 56%, var(--tor-border-opacity, 1));\n  --tor-border-secondary: hsla(208, 7%, 46%, var(--tor-border-opacity, 1));\n  --tor-border-success: hsla(152, 69%, 31%, var(--tor-border-opacity, 1));\n  --tor-border-info: hsla(190, 90%, 50%, var(--tor-border-opacity, 1));\n  --tor-border-warning: hsla(45, 100%, 51%, var(--tor-border-opacity, 1));\n  --tor-border-danger: hsla(354, 70%, 54%, var(--tor-border-opacity, 1));\n  --tor-border-light: hsla(210, 17%, 98%, var(--tor-border-opacity, 1));\n  --tor-border-dark: hsla(210, 10%, 23%, var(--tor-border-opacity, 1));\n  --tor-border-transparent: transparent;\n  --tor-border-opacity: 1;\n}\n\n[data-tor*=\"opacity\"],\n[data-tor*=\"fade.\"] {\n  opacity: var(--tor-opacity);\n}\n\n[data-tor*=\":mask(\"] {\n  clip-path: polygon(var(--tor-mask));\n  contain: paint;\n  backface-visibility: hidden;\n  will-change: clip-path;\n}\n\n@-moz-document url-prefix() {\n  [data-tor*=\":mask(\"] {\n    filter: drop-shadow(0 0 0 transparent);\n  }\n}\n\n[data-tor*=\":mask(circle\"] {\n  clip-path: circle(var(--tor-mask));\n}\n\n[data-tor*=\":mask(\"] {\n  --tor-mask-skew: 0rem;\n  --tor-mask-left: calc(0% - var(--tor-mask-skew)) 0%, 100% 0%, 100% 100%, 0% 100%;\n  --tor-mask-right: 0% 0%, calc(100% + var(--tor-mask-skew)) 0%, 100% 100%, 0% 100%;\n  --tor-mask-up: 0% 0%, 100% calc(0% - var(--tor-mask-skew)), 100% 100%, 0% 100%;\n  --tor-mask-down: 0% 0%, 100% 0%, 100% calc(100% + var(--tor-mask-skew)), 0% 100%;\n  --tor-mask-circle: 100%;\n}\n\n[data-tor*=\":mask(left\"] {\n  --tor-mask-a: var(--tor-mask-left);\n  --tor-mask: 100% 0%, 100% 0%, 100% 100%, calc(100% + var(--tor-mask-skew)) 100%;\n}\n\n[data-tor*=\":mask(right\"] {\n  --tor-mask-a: var(--tor-mask-right);\n  --tor-mask: 0% 0%, 0% 0%, calc(0% - var(--tor-mask-skew)) 100%, 0% 100%;\n}\n\n[data-tor*=\":mask(up\"] {\n  --tor-mask-a: var(--tor-mask-up);\n  --tor-mask: 0% calc(100% + var(--tor-mask-skew)), 100% 100%, 100% 100%, 0% 100%;\n}\n\n[data-tor*=\":mask(down\"] {\n  --tor-mask-a: var(--tor-mask-down);\n  --tor-mask: 0% 0%, 100% 0%, 100% 0%, 0% calc(0% - var(--tor-mask-skew));\n}\n\n[data-tor*=\":mask(circle\"] {\n  --tor-mask-a: var(--tor-mask-circle);\n  --tor-mask: 0%;\n}\n\n[data-tor*=\"push.\"],\n[data-tor*=\"pull.\"] {\n  --tor-push-pull-xs: 0.25rem;\n  --tor-push-pull-sm: 1rem;\n  --tor-push-pull-md: 2rem;\n  --tor-push-pull-lg: 5rem;\n  --tor-push-pull-xl: 8rem;\n  --tor-push-pull-full: 100%;\n  --tor-push-pull-half: 50%;\n}\n\n[data-tor*=\":reveal.hide(\"],\n[data-tor*=\":reveal(\"] {\n  clip-path: var(--tor-reveal);\n  backface-visibility: hidden;\n  transform-style: preserve-3d;\n  contain: paint;\n  will-change: transform;\n  transition-delay: calc(var(--tor-delay) + 100ms);\n}\n\nspan[data-tor*=\":reveal(\"] {\n  display: inline-block;\n}\n\n[data-tor*=\":reveal(\"] {\n  --tor-reveal: inset(0% 0% 0% 0%);\n  --tor-translateY: 0%;\n  --tor-translateX: 0%;\n}\n\n[data-tor*=\":reveal.hide(\"] {\n  --tor-reveal: inset(0% 0% 0% 0%);\n  --tor-translateY: 0%;\n  --tor-translateX: 0%;\n}\n\n[data-tor*=\":reveal(up\"] {\n  --tor-reveal-idle: inset(0% 0% 99.999% 0%);\n  --tor-translateY-idle: 100%;\n}\n\n[data-tor*=\":reveal(down\"] {\n  --tor-reveal-idle: inset(99.999% 0% 0% 0%);\n  --tor-translateY-idle: -100%;\n}\n\n[data-tor*=\":reveal(right\"] {\n  --tor-reveal-idle: inset(0% 0% 0% 99.999%);\n  --tor-translateX-idle: -100%;\n}\n\n[data-tor*=\":reveal(left\"] {\n  --tor-reveal-idle: inset(0% 99.999% 0% 0%);\n  --tor-translateX-idle: 100%;\n}\n\n[data-tor*=\":reveal.hide(down\"] {\n  --tor-reveal-idle: inset(0% 0% 100% 0%);\n  --tor-translateY-idle: 100%;\n}\n\n[data-tor*=\":reveal.hide(up\"] {\n  --tor-reveal-idle: inset(100% 0% 0% 0%);\n  --tor-translateY-idle: -100%;\n}\n\n[data-tor*=\":reveal.hide(left\"] {\n  --tor-reveal-idle: inset(0% 0% 0% 100%);\n  --tor-translateX-idle: -100%;\n}\n\n[data-tor*=\":reveal.hide(right\"] {\n  --tor-reveal-idle: inset(0% 100% 0% 0%);\n  --tor-translateX-idle: 100%;\n}\n\n[data-tor*=\"shadow(\"] {\n  --tor-shadow-inset: var(--tor-none, /*!*/);\n  --tor-shadow-color: 0, 0, 0;\n  --tor-shadow-offsetX: 0rem;\n  --tor-shadow-offsetY: 0rem;\n  --tor-shadow-intensity: 1;\n}\n\n[data-tor*=\"shadow(\"] {\n  --tor-shadow-md: var(--tor-shadow-inset) var(--tor-shadow-offsetX, 0rem) calc(0.25rem + var(--tor-shadow-offsetY, 0rem)) 0.625rem rgba(var(--tor-shadow-color), calc(0.15 * var(--tor-shadow-intensity)));\n  --tor-shadow-xs: var(--tor-shadow-inset) var(--tor-shadow-offsetX, 0rem) calc(0.125rem + var(--tor-shadow-offsetY, 0rem)) 0.1875rem rgba(var(--tor-shadow-color), calc(0.1 * var(--tor-shadow-intensity)));\n  --tor-shadow-sm: var(--tor-shadow-inset) var(--tor-shadow-offsetX, 0rem) calc(0.125rem + var(--tor-shadow-offsetY, 0rem)) 0.375rem rgba(var(--tor-shadow-color), calc(0.15 * var(--tor-shadow-intensity)));\n  --tor-shadow-lg: var(--tor-shadow-inset) var(--tor-shadow-offsetX, 0rem) calc(0.25rem + var(--tor-shadow-offsetY, 0rem)) 1.5rem rgba(var(--tor-shadow-color), calc(0.25 * var(--tor-shadow-intensity)));\n  --tor-shadow-xl: var(--tor-shadow-inset) var(--tor-shadow-offsetX, 0rem) calc(0.75rem + var(--tor-shadow-offsetY, 0rem)) 2rem rgba(var(--tor-shadow-color), calc(0.25 * var(--tor-shadow-intensity)));\n  --tor-shadow-pop: var(--tor-shadow-inset) var(--tor-shadow-offsetX, 0rem) calc(1.5rem + var(--tor-shadow-offsetY, 0rem)) 5.5rem rgba(var(--tor-shadow-color), calc(0.5 * var(--tor-shadow-intensity)));\n  --tor-shadow-risen: var(--tor-shadow-inset) var(--tor-shadow-offsetX, 0rem) calc(1.5rem + var(--tor-shadow-offsetY, 0rem)) 1rem -1rem rgba(var(--tor-shadow-color), calc(0.3 * var(--tor-shadow-intensity)));\n  --tor-shadow-no: none;\n}\n\n[data-tor*=\"shadow-offset\"] {\n  --tor-shadow-offset-xs: 0.25rem;\n  --tor-shadow-offset-sm: 1rem;\n  --tor-shadow-offset-md: 2rem;\n  --tor-shadow-offset-lg: 5rem;\n  --tor-shadow-offset-xl: 8rem;\n}\n\n[data-tor*=\"shadow-intensity(\"] {\n  --tor-shadow-intensity-xs: 0.25;\n  --tor-shadow-intensity-sm: 0.5;\n  --tor-shadow-intensity-md: 1;\n  --tor-shadow-intensity-lg: 2;\n  --tor-shadow-intensity-xl: 3;\n}\n\n[data-tor*=\"text(\"] {\n  --tor-text-blue: hsla(230, 100%, calc(56% * var(--tor-text-lightness, 1)), var(--tor-text-opacity, 1));\n  --tor-text-indigo: hsla(263, 90%, calc(51% * var(--tor-text-lightness, 1)), var(--tor-text-opacity, 1));\n  --tor-text-purple: hsla(261, 51%, calc(51% * var(--tor-text-lightness, 1)), var(--tor-text-opacity, 1));\n  --tor-text-pink: hsla(330, 67%, calc(52% * var(--tor-text-lightness, 1)), var(--tor-text-opacity, 1));\n  --tor-text-red: hsla(354, 70%, calc(54% * var(--tor-text-lightness, 1)), var(--tor-text-opacity, 1));\n  --tor-text-orange: hsla(27, 98%, calc(54% * var(--tor-text-lightness, 1)), var(--tor-text-opacity, 1));\n  --tor-text-yellow: hsla(45, 100%, calc(51% * var(--tor-text-lightness, 1)), var(--tor-text-opacity, 1));\n  --tor-text-green: hsla(152, 69%, calc(31% * var(--tor-text-lightness, 1)), var(--tor-text-opacity, 1));\n  --tor-text-teal: hsla(162, 73%, calc(46% * var(--tor-text-lightness, 1)), var(--tor-text-opacity, 1));\n  --tor-text-cyan: hsla(190, 90%, calc(50% * var(--tor-text-lightness, 1)), var(--tor-text-opacity, 1));\n  --tor-text-white: hsla(0, 0%, calc(100% * var(--tor-text-lightness, 1)), var(--tor-text-opacity, 1));\n  --tor-text-gray: hsla(210, 14%, calc(83% * var(--tor-text-lightness, 1)), var(--tor-text-opacity, 1));\n  --tor-text-gray-dark: hsla(210, 10%, calc(23% * var(--tor-text-lightness, 1)), var(--tor-text-opacity, 1));\n  --tor-text-navy: hsla(210, 100%, calc(12% * var(--tor-text-lightness, 1)), var(--tor-text-opacity, 1));\n  --tor-text-maroon: hsla(331, 74%, calc(30% * var(--tor-text-lightness, 1)), var(--tor-text-opacity, 1));\n  --tor-text-brown: hsla(28, 28%, calc(39% * var(--tor-text-lightness, 1)), var(--tor-text-opacity, 1));\n  --tor-text-magenta: hsla(314, 88%, calc(51% * var(--tor-text-lightness, 1)), var(--tor-text-opacity, 1));\n  --tor-text-lime: hsla(146, 100%, calc(50% * var(--tor-text-lightness, 1)), var(--tor-text-opacity, 1));\n  --tor-text-black: hsla(0, 0%, calc(0% * var(--tor-text-lightness, 1)), var(--tor-text-opacity, 1));\n  --tor-text-primary: hsla(230, 100%, calc(56% * var(--tor-text-lightness, 1)), var(--tor-text-opacity, 1));\n  --tor-text-secondary: hsla(208, 7%, calc(46% * var(--tor-text-lightness, 1)), var(--tor-text-opacity, 1));\n  --tor-text-success: hsla(152, 69%, calc(31% * var(--tor-text-lightness, 1)), var(--tor-text-opacity, 1));\n  --tor-text-info: hsla(190, 90%, calc(50% * var(--tor-text-lightness, 1)), var(--tor-text-opacity, 1));\n  --tor-text-warning: hsla(45, 100%, calc(51% * var(--tor-text-lightness, 1)), var(--tor-text-opacity, 1));\n  --tor-text-danger: hsla(354, 70%, calc(54% * var(--tor-text-lightness, 1)), var(--tor-text-opacity, 1));\n  --tor-text-light: hsla(210, 17%, calc(98% * var(--tor-text-lightness, 1)), var(--tor-text-opacity, 1));\n  --tor-text-dark: hsla(210, 10%, calc(23% * var(--tor-text-lightness, 1)), var(--tor-text-opacity, 1));\n  --tor-text-transparent: transparent;\n}\n\n[data-tor*=\"rotateY.\"],\n[data-tor*=\"rotateX.\"] {\n  --tor-perspective-self: 1000px;\n  transform-style: preserve-3d;\n}\n\n[data-tor*=\"loop:\"],\n[data-tor-loop] {\n  --tor-loop-duration: 1000ms;\n  --tor-loop-timing: ease-in-out;\n  --tor-loop-direction: normal;\n  --tor-loop-speed: 1;\n  animation-iteration-count: infinite;\n  will-change: transform;\n}\n\n@-moz-document url-prefix() {\n  [data-tor*=\"loop:\"],\n  [data-tor-loop] {\n    rotate: 0.02deg;\n    outline: 1px solid transparent;\n  }\n}\n\n[data-tor*=\":move\"] {\n  position: absolute;\n}\n\n[data-tor*=\"loop:bg\"],\n[data-tor*=\"loop:sm::bg\"],\n[data-tor*=\"loop:md::bg\"],\n[data-tor*=\"loop:lg::bg\"],\n[data-tor*=\"loop:xl::bg\"],\n[data-tor*=\"loop:xxl::bg\"] {\n  --tor-loop-bg-start: var(--tor-loop-bg-value-start, #1f44ff);\n  --tor-loop-bg-end: var(--tor-loop-bg-value, #6c757d);\n}\n\n[data-tor*=\":fill\"] {\n  --tor-loop-fill-start: var(--tor-loop-fill-value-start, #1f44ff);\n  --tor-loop-fill-end: var(--tor-loop-fill-value, #6c757d);\n}\n\n@keyframes loop-blink {\n  0% {\n    opacity: 1;\n  }\n  50% {\n    opacity: var(--tor-loop-blink-value);\n  }\n  100% {\n    opacity: 1;\n  }\n}\n\n@keyframes loop-circle {\n  0% {\n    transform: rotate(0deg) translateX(var(--tor-loop-circle-value)) rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg) translateX(var(--tor-loop-circle-value)) rotate(-360deg);\n  }\n}\n\n@keyframes loop-float {\n  0% {\n    transform: translateY(0rem);\n  }\n  100% {\n    transform: translateY(var(--tor-loop-float-value));\n  }\n}\n\n@keyframes loop-jump {\n  0% {\n    transform: translateY(0rem);\n  }\n  50% {\n    transform: translateY(calc(var(--tor-loop-jump-value) * -1));\n  }\n  65% {\n    transform: translateY(0rem);\n  }\n  70% {\n    transform: translateY(calc( var(--tor-loop-jump-value)  * -0.2));\n  }\n  90% {\n    transform: translateY(0rem);\n  }\n  100% {\n    transform: translateY(0rem);\n  }\n}\n\n@keyframes loop-pulse {\n  0% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(var(--tor-loop-pulse-value));\n  }\n  100% {\n    transform: scale(1);\n  }\n}\n\n@keyframes loop-radiate {\n  0% {\n    box-shadow: 0 0 0 0rem var(--tor-loop-color-0);\n  }\n  100% {\n    box-shadow: 0 0 0 var(--tor-loop-radiate-value) var(--tor-loop-color-100);\n  }\n}\n\n@keyframes loop-spin {\n  0% {\n    transform: rotateZ(0deg);\n  }\n  100% {\n    transform: rotateZ(var(--tor-loop-spin-value));\n  }\n}\n\n@keyframes loop-swing {\n  0% {\n    transform: rotateZ(var(--tor-loop-swing-value));\n  }\n  50% {\n    transform: rotateZ(calc( var(--tor-loop-swing-value) * (-1)));\n  }\n  100% {\n    transform: rotateZ(var(--tor-loop-swing-value));\n  }\n}\n\n@keyframes loop-wobble-h {\n  0% {\n    transform: translateX(calc( var(--tor-loop-wobble-h-value) * 0.5));\n  }\n  100% {\n    transform: translateX(calc( var(--tor-loop-wobble-h-value) * -0.5));\n  }\n}\n\n@keyframes loop-wobble-v {\n  0% {\n    transform: translateY(calc( var(--tor-loop-wobble-v-value) * 0.5));\n  }\n  100% {\n    transform: translateY(calc( var(--tor-loop-wobble-v-value) * -0.5));\n  }\n}\n\n@keyframes loop-move-right {\n  0% {\n    left: 0%;\n    transform: translateX(-100%);\n  }\n  99% {\n    visibility: hidden;\n    left: 100%;\n    transform: translateX(0%);\n  }\n  100% {\n    visibility: hidden;\n    left: 100%;\n    transform: translateX(0%);\n  }\n}\n\n@keyframes loop-move-left {\n  0% {\n    right: 0%;\n    transform: translateX(100%);\n  }\n  99% {\n    visibility: hidden;\n    right: 100%;\n    transform: translateX(0%);\n  }\n  100% {\n    visibility: hidden;\n    right: 100%;\n    transform: translateX(0%);\n  }\n}\n\n@keyframes loop-move-down {\n  0% {\n    top: 0%;\n    transform: translateY(-100%);\n  }\n  99% {\n    visibility: hidden;\n    top: 100%;\n    transform: translateY(0%);\n  }\n  100% {\n    visibility: hidden;\n    top: 0%;\n    transform: translateY(0%);\n  }\n}\n\n@keyframes loop-move-up {\n  0% {\n    bottom: 0%;\n    transform: translateY(100%);\n  }\n  99% {\n    visibility: hidden;\n    bottom: 100%;\n    transform: translateY(0%);\n  }\n  100% {\n    visibility: hidden;\n    bottom: 100%;\n    transform: translateY(0%);\n  }\n}\n\n@keyframes loop-glow {\n  0% {\n    filter: drop-shadow(0rem 0rem 0rem var(--tor-loop-glow-color, #1f44ff));\n  }\n  50% {\n    filter: drop-shadow(0rem 0rem var(--tor-loop-glow-value) var(--tor-loop-glow-color, #1f44ff));\n  }\n  100% {\n    filter: drop-shadow(0rem 0rem 0rem var(--tor-loop-glow-color, #1f44ff));\n  }\n}\n\n@keyframes loop-bg {\n  0% {\n    background-color: var(--tor-loop-bg-start);\n  }\n  100% {\n    background-color: var(--tor-loop-bg-end);\n  }\n}\n\n@keyframes loop-fill {\n  0% {\n    fill: var(--tor-loop-fill-start);\n  }\n  100% {\n    fill: var(--tor-loop-fill-end);\n  }\n}\n\n[data-tor*=\"loop:blink\"] {\n  --tor-loop-blink-value: 0;\n  --tor-loop-blink-duration: var(--tor-loop-duration);\n  --tor-loop-blink-direction: var(--tor-loop-direction);\n  --tor-loop-blink-timing: var(--tor-loop-timing);\n}\n\n[data-tor*=\"loop:bg\"] {\n  --tor-loop-bg-value: #6c757d;\n  --tor-loop-bg-duration: 2s;\n  --tor-loop-bg-direction: alternate;\n  --tor-loop-bg-timing: linear;\n}\n\n[data-tor*=\"loop:fill\"] {\n  --tor-loop-fill-value: #6c757d;\n  --tor-loop-fill-duration: 2s;\n  --tor-loop-fill-direction: alternate;\n  --tor-loop-fill-timing: linear;\n}\n\n[data-tor*=\"loop:jump\"] {\n  --tor-loop-jump-value: 0.5rem;\n  --tor-loop-jump-duration: 1500ms;\n  --tor-loop-jump-direction: var(--tor-loop-direction);\n  --tor-loop-jump-timing: cubic-bezier(0.4, 0, 0.4, 1.5);\n}\n\n[data-tor*=\"loop:circle\"] {\n  --tor-loop-circle-value: 1rem;\n  --tor-loop-circle-duration: 2000ms;\n  --tor-loop-circle-direction: var(--tor-loop-direction);\n  --tor-loop-circle-timing: linear;\n}\n\n[data-tor*=\"loop:float\"] {\n  --tor-loop-float-value: -0.5rem;\n  --tor-loop-float-duration: var(--tor-loop-duration);\n  --tor-loop-float-direction: alternate;\n  --tor-loop-float-timing: var(--tor-loop-timing);\n}\n\n[data-tor*=\"loop:glow\"] {\n  --tor-loop-glow-value: 0.5rem;\n  --tor-loop-glow-duration: 2s;\n  --tor-loop-glow-direction: var(--tor-loop-direction);\n  --tor-loop-glow-timing: var(--tor-loop-timing);\n}\n\n[data-tor*=\"loop:pulse\"] {\n  --tor-loop-pulse-value: 1.1;\n  --tor-loop-pulse-duration: var(--tor-loop-duration);\n  --tor-loop-pulse-direction: var(--tor-loop-direction);\n  --tor-loop-pulse-timing: var(--tor-loop-timing);\n}\n\n[data-tor*=\"loop:spin\"] {\n  --tor-loop-spin-value: 360deg;\n  --tor-loop-spin-duration: 2000ms;\n  --tor-loop-spin-direction: var(--tor-loop-direction);\n  --tor-loop-spin-timing: linear;\n}\n\n[data-tor*=\"loop:swing\"] {\n  --tor-loop-swing-value: 20deg;\n  --tor-loop-swing-duration: 500ms;\n  --tor-loop-swing-direction: var(--tor-loop-direction);\n  --tor-loop-swing-timing: var(--tor-loop-timing);\n}\n\n[data-tor*=\"loop:radiate\"] {\n  --tor-loop-radiate-value: 0.75rem;\n  --tor-loop-radiate-duration: var(--tor-loop-duration);\n  --tor-loop-radiate-direction: var(--tor-loop-direction);\n  --tor-loop-radiate-timing: var(--tor-loop-timing);\n}\n\n[data-tor*=\"loop:wobble.v\"] {\n  --tor-loop-wobble-v-value: 1rem;\n  --tor-loop-wobble-v-duration: 800ms;\n  --tor-loop-wobble-v-direction: alternate;\n  --tor-loop-wobble-v-timing: var(--tor-loop-timing);\n}\n\n[data-tor*=\"loop:wobble.h\"] {\n  --tor-loop-wobble-h-value: 1rem;\n  --tor-loop-wobble-h-duration: 800ms;\n  --tor-loop-wobble-h-direction: alternate;\n  --tor-loop-wobble-h-timing: var(--tor-loop-timing);\n}\n\n[data-tor*=\"loop:move.right\"] {\n  --tor-loop-move-right-value: ;\n  --tor-loop-move-right-duration: 2000ms;\n  --tor-loop-move-right-direction: var(--tor-loop-direction);\n  --tor-loop-move-right-timing: linear;\n}\n\n[data-tor*=\"loop:move.left\"] {\n  --tor-loop-move-left-value: ;\n  --tor-loop-move-left-duration: 2000ms;\n  --tor-loop-move-left-direction: var(--tor-loop-direction);\n  --tor-loop-move-left-timing: linear;\n}\n\n[data-tor*=\"loop:move.up\"] {\n  --tor-loop-move-up-value: ;\n  --tor-loop-move-up-duration: 2000ms;\n  --tor-loop-move-up-direction: var(--tor-loop-direction);\n  --tor-loop-move-up-timing: linear;\n}\n\n[data-tor*=\"loop:move.down\"] {\n  --tor-loop-move-down-value: ;\n  --tor-loop-move-down-duration: 2000ms;\n  --tor-loop-move-down-direction: var(--tor-loop-direction);\n  --tor-loop-move-down-timing: linear;\n}\n\n[data-tor*=\":radiate(primary\"] {\n  --tor-loop-color-0: rgba(31, 68, 255, 0.8);\n  --tor-loop-color-100: rgba(31, 68, 255, 0);\n}\n\n[data-tor*=\":radiate(secondary\"] {\n  --tor-loop-color-0: rgba(108, 117, 125, 0.8);\n  --tor-loop-color-100: rgba(108, 117, 125, 0);\n}\n\n[data-tor*=\":radiate(success\"] {\n  --tor-loop-color-0: rgba(25, 135, 84, 0.8);\n  --tor-loop-color-100: rgba(25, 135, 84, 0);\n}\n\n[data-tor*=\":radiate(info\"] {\n  --tor-loop-color-0: rgba(13, 202, 240, 0.8);\n  --tor-loop-color-100: rgba(13, 202, 240, 0);\n}\n\n[data-tor*=\":radiate(warning\"] {\n  --tor-loop-color-0: rgba(255, 193, 7, 0.8);\n  --tor-loop-color-100: rgba(255, 193, 7, 0);\n}\n\n[data-tor*=\":radiate(danger\"] {\n  --tor-loop-color-0: rgba(220, 53, 69, 0.8);\n  --tor-loop-color-100: rgba(220, 53, 69, 0);\n}\n\n[data-tor*=\":radiate(light\"] {\n  --tor-loop-color-0: rgba(248, 249, 250, 0.8);\n  --tor-loop-color-100: rgba(248, 249, 250, 0);\n}\n\n[data-tor*=\":radiate(dark\"] {\n  --tor-loop-color-0: rgba(52, 58, 64, 0.8);\n  --tor-loop-color-100: rgba(52, 58, 64, 0);\n}\n\n[data-tor*=\":radiate(gray\"] {\n  --tor-loop-color-0: rgba(206, 212, 218, 0.8);\n  --tor-loop-color-100: rgba(206, 212, 218, 0);\n}\n\n[data-tor~=\"quad\"] {\n  --tor-loop-timing: cubic-bezier(0.23, 0, 0, 1) !important;\n}\n\n[data-tor~=\"exponential\"] {\n  --tor-loop-timing: cubic-bezier(0.9, 0, 0.1, 1) !important;\n}\n\n[data-tor~=\"bounce\"] {\n  --tor-loop-timing: cubic-bezier(0.4, 0, 0, 1.4) !important;\n}\n","//\r\n// ------------------------------------------------------------------------\r\n// THEME COLORS\r\n// ------------------------------------------------------------------------\r\n//\r\n\r\n// Color system\r\n\r\n$white:    #fff !default;\r\n$gray-100: #f8f9fa !default;\r\n$gray-200: #e9ecef !default;\r\n$gray-300: #dee2e6 !default;\r\n$gray-400: #ced4da !default;\r\n$gray-500: #adb5bd !default;\r\n$gray-600: #6c757d !default;\r\n$gray-700: #495057 !default;\r\n$gray-800: #343a40 !default;\r\n$gray-900: #212529 !default;\r\n$black:    #000 !default;\r\n\r\n$grays: (\r\n  \"100\": $gray-100,\r\n  \"200\": $gray-200,\r\n  \"300\": $gray-300,\r\n  \"400\": $gray-400,\r\n  \"500\": $gray-500,\r\n  \"600\": $gray-600,\r\n  \"700\": $gray-700,\r\n  \"800\": $gray-800,\r\n  \"900\": $gray-900\r\n) !default;\r\n\r\n$blue:      #1f44ff !default;\r\n$indigo:    #6610f2 !default;\r\n$navy:      #001f3f !default; // New Torus Kit color\r\n$maroon:    #85144b !default; // New Torus Kit color\r\n$brown:     #806248 !default; // New Torus Kit color\r\n$purple:    #6f42c1 !default;\r\n$pink:      #d63384 !default;\r\n$magenta:   #f012be !default; // New Torus Kit color\r\n$red:       #dc3545 !default;\r\n$orange:    #fd7e14 !default;\r\n$yellow:    #ffc107 !default;\r\n$lime:      #01ff70 !default; // New Torus Kit color\r\n$green:     #198754 !default;\r\n$teal:      #20c997 !default;\r\n$cyan:      #0dcaf0 !default;\r\n\r\n$primary:   $blue !default;\r\n$secondary: $gray-600 !default;\r\n$success:   $green !default;\r\n$info:      $cyan !default;\r\n$warning:   $yellow !default;\r\n$danger:    $red !default;\r\n$light:     $gray-100 !default;\r\n$dark:      $gray-800 !default;\r\n$gray:      $gray-400 !default;\r\n\r\n$theme-colors: (\r\n  \"primary\":    $primary,\r\n  \"secondary\":  $secondary,\r\n  \"success\":    $success,\r\n  \"info\":       $info,\r\n  \"warning\":    $warning,\r\n  \"danger\":     $danger,\r\n  \"light\":      $light,\r\n  \"dark\":       $dark,\r\n  \"gray\":       $gray,\r\n) !default;\r\n\r\n//\r\n// New colors\r\n//\r\n\r\n$new-colors: () !default;\r\n$new-colors: (\r\n  \"navy\":     $navy,\r\n  \"maroon\":   $maroon,\r\n  \"brown\":    $brown,\r\n  \"magenta\":  $magenta,\r\n  \"lime\":     $lime,\r\n  \"black\":    $black,\r\n);\r\n\r\n//\r\n// Colors\r\n//\r\n\r\n$colors: (\r\n  \"blue\":       $blue,\r\n  \"indigo\":     $indigo,\r\n  \"purple\":     $purple,\r\n  \"pink\":       $pink,\r\n  \"red\":        $red,\r\n  \"orange\":     $orange,\r\n  \"yellow\":     $yellow,\r\n  \"green\":      $green,\r\n  \"teal\":       $teal,\r\n  \"cyan\":       $cyan,\r\n  \"white\":      $white,\r\n  \"gray\":       $gray-500,\r\n  \"gray-dark\":  $gray-800,\r\n) !default;\r\n\r\n$theme-colors-hsla:   () !default;\r\n$all-colors:          () !default;\r\n$bg-colors-hsla:      () !default;\r\n$border-colors-hsla:  () !default;\r\n$text-colors-hsla:    () !default;\r\n\r\n//\r\n// Alpha values\r\n//\r\n\r\n$alpha-values: () !default;\r\n$alpha-values: (\r\n  0: 0,\r\n  5: .05,\r\n  10: .1,\r\n  20: .2,\r\n  30: .3,\r\n  40: .4,\r\n  50: .5,\r\n  60: .6,\r\n  70: .7,\r\n  80: .8,\r\n  90: .9,\r\n  100: 1\r\n);\r\n\r\n//\r\n// ------------------------------------------------------------------------\r\n// OPTIONS\r\n// ------------------------------------------------------------------------\r\n//\r\n\r\n$enable-extended-color-palette:   true !default;\r\n$enable-shadows:                  true !default;\r\n\r\n//\r\n// Shadows\r\n//\r\n\r\n$shadow-size-xs:      var(--tor-shadow-offsetX, 0rem) calc(0.125rem + var(--tor-shadow-offsetY, 0rem))  0.1875rem !default;\r\n$shadow-size-sm:      var(--tor-shadow-offsetX, 0rem) calc(0.125rem + var(--tor-shadow-offsetY, 0rem)) 0.375rem !default;\r\n$shadow-size:         var(--tor-shadow-offsetX, 0rem) calc(0.25rem + var(--tor-shadow-offsetY, 0rem)) 0.625rem !default;\r\n$shadow-size-lg:      var(--tor-shadow-offsetX, 0rem) calc(0.25rem + var(--tor-shadow-offsetY, 0rem)) 1.5rem !default;\r\n$shadow-size-xl:      var(--tor-shadow-offsetX, 0rem) calc(0.75rem + var(--tor-shadow-offsetY, 0rem)) 2rem !default;\r\n$shadow-size-pop:     var(--tor-shadow-offsetX, 0rem) calc(1.5rem + var(--tor-shadow-offsetY, 0rem)) 5.5rem !default;\r\n$shadow-size-risen:   var(--tor-shadow-offsetX, 0rem) calc(1.5rem + var(--tor-shadow-offsetY, 0rem)) 1rem -1rem !default;\r\n\r\n$shadow-opacity-xs:     0.1 !default;\r\n$shadow-opacity-sm:     0.15 !default;\r\n$shadow-opacity:        0.15 !default;\r\n$shadow-opacity-md:     0.15 !default;\r\n$shadow-opacity-lg:     0.25 !default;\r\n$shadow-opacity-xl:     0.25 !default;\r\n$shadow-opacity-pop:    0.5 !default;\r\n$shadow-opacity-risen:  0.3 !default;\r\n\r\n$shadow-xs:           $shadow-size-xs rgba(var(--tor-shadow-color), calc(#{$shadow-opacity-xs} * var(--tor-shadow-intensity))) !default;\r\n$shadow-sm:           $shadow-size-sm rgba(var(--tor-shadow-color), calc(#{$shadow-opacity-sm} * var(--tor-shadow-intensity))) !default;\r\n$shadow:              $shadow-size rgba(var(--tor-shadow-color), calc(#{$shadow-opacity} * var(--tor-shadow-intensity))) !default;\r\n$shadow-lg:           $shadow-size-lg rgba(var(--tor-shadow-color), calc(#{$shadow-opacity-lg} * var(--tor-shadow-intensity))) !default;\r\n$shadow-xl:           $shadow-size-xl rgba(var(--tor-shadow-color), calc(#{$shadow-opacity-xl} * var(--tor-shadow-intensity))) !default;\r\n$shadow-pop:          $shadow-size-pop rgba(var(--tor-shadow-color), calc(#{$shadow-opacity-pop} * var(--tor-shadow-intensity))) !default;\r\n$shadow-risen:        $shadow-size-risen rgba(var(--tor-shadow-color), calc(#{$shadow-opacity-risen} * var(--tor-shadow-intensity))) !default;\r\n$shadow-transparent:  0 0 0 transparent !default;\r\n\r\n$shadows: () !default;\r\n$shadows: (\r\n  null:       var(--tor-shadow-inset) $shadow,\r\n  xs:         var(--tor-shadow-inset) $shadow-xs,\r\n  sm:         var(--tor-shadow-inset) $shadow-sm,\r\n  lg:         var(--tor-shadow-inset) $shadow-lg,\r\n  xl:         var(--tor-shadow-inset) $shadow-xl,\r\n  pop:        var(--tor-shadow-inset) $shadow-pop,\r\n  risen:      var(--tor-shadow-inset) $shadow-risen,\r\n  no:          none,\r\n);\r\n\r\n$shadow-offset: () !default;\r\n$shadow-offset: (\r\n  xs: 0.25rem,\r\n  sm: 1rem,\r\n  md: 2rem,\r\n  lg: 5rem,\r\n  xl: 8rem,\r\n);\r\n\r\n$shadow-intensity: () !default;\r\n$shadow-intensity: (\r\n  xs: 0.25,\r\n  sm: 0.5,\r\n  md: 1,\r\n  lg: 2,\r\n  xl: 3,\r\n);\r\n\r\n//\r\n// Box shadow\r\n//\r\n\r\n$box-shadow-intensity-light:    .5;\r\n$box-shadow-intensity:          1;\r\n$box-shadow-intensity-strong:   2;\r\n\r\n$box-shadow-xs:     0 0.125rem 0.1875rem rgba($black, $shadow-opacity-xs) !default;\r\n$box-shadow-sm:     0 0.125rem 0.375rem rgba($black, $shadow-opacity-sm) !default;\r\n$box-shadow:        0 0.25rem 0.625rem rgba($black, $shadow-opacity) !default;\r\n$box-shadow-lg:     0 0.25rem 1.5rem rgba($black, $shadow-opacity-lg) !default;\r\n$box-shadow-xl:     0 0.75rem 2rem rgba($black, $shadow-opacity-xl) !default;\r\n$box-shadow-pop:    0 1.5rem 5.5rem rgba($black, $shadow-opacity-pop) !default;\r\n$box-shadow-risen:  0 1.5rem 1rem -1rem rgba($black, $shadow-opacity-risen) !default;\r\n$box-shadow-inset:  inset 0 1px 2px rgba($black, .075) !default;\r\n\r\n//\r\n// Color\r\n//\r\n// Color palette extend\r\n// Merges default $colors and $theme-colors with $new-colors\r\n//\r\n\r\n@if $enable-extended-color-palette {\r\n  $colors:      map-merge($colors, $new-colors);\r\n  $all-colors:  map-merge($colors, $theme-colors);\r\n}\r\n@else {\r\n  $all-colors:  $theme-colors;\r\n}\r\n\r\n@each $name, $value in $all-colors {\r\n  $h: #{str-replace(#{round(hue($value))}, \"deg\", \"\")};\r\n  $s: #{round(saturation($value))};\r\n  $l: #{round(lightness($value))};\r\n\r\n  $hsla-bg:           hsla($h, $s, calc(#{$l} * var(--tor-bg-lightness, 1)), var(--tor-bg-opacity, 1) );\r\n  $hsla-border:       hsla($h, $s, $l, var(--tor-border-opacity, 1) );\r\n  $hsla-text:         hsla($h, $s, calc(#{$l} * var(--tor-text-lightness, 1)), var(--tor-text-opacity, 1) );\r\n\r\n  $update-bg:         ($name: $hsla-bg);\r\n  $update-border:     ($name: $hsla-border);\r\n  $update-text:       ($name: $hsla-text);\r\n\r\n  $bg-colors-hsla:      map-merge($bg-colors-hsla, $update-bg);\r\n  $border-colors-hsla:  map-merge($border-colors-hsla, $update-border);\r\n  $text-colors-hsla:    map-merge($text-colors-hsla, $update-text);\r\n}\r\n\r\n//\r\n// Shading colors steps\r\n// Values for lighten-* and darken-* class\r\n//\r\n\r\n$color-shading: () !default;\r\n$color-shading: (\r\n  xs: 0.1,\r\n  sm: 0.2,\r\n  md: 0.3,\r\n  lg: 0.4,\r\n  xl: 0.5,\r\n);\r\n\r\n//\r\n// Transitions\r\n//\r\n\r\n$transition-duration:               350ms !default;\r\n$transition-duration-quad:          450ms !default;\r\n$transition-duration-exponential:   600ms !default;\r\n$transition-duration-bounce:        500ms !default;\r\n$transition-duration-ease-out:      700ms !default;\r\n\r\n$transition-timing:                     cubic-bezier(.35,0,.1,1) !default;\r\n$transition-timing-quad:                cubic-bezier(0.23, 0, 0, 1) !default;\r\n$transition-timing-quartic:             cubic-bezier(.77,0,.18,1) !default;\r\n$transition-timing-exponential:         cubic-bezier(.9, 0, .1, 1) !default;\r\n$transition-timing-bounce:              cubic-bezier(.4, 0, 0, 1.4) !default;\r\n$transition-timing-bounce-exponential:  cubic-bezier(.9,0,0,1.3) !default;\r\n$transition-timing-ease-out:            cubic-bezier(0, .2, .15, 1) !default;\r\n$transition-timing-linear:              linear !default;\r\n\r\n$transition:                $transition-duration $transition-timing !default;\r\n$transition-exponential:    $transition-duration-exponential $transition-timing-exponential !default;\r\n$transition-quad:           $transition-duration-quad $transition-timing-quad !default;\r\n$transition-bounce:         $transition-duration-bounce $transition-timing-bounce !default;\r\n$transition-linear:         $transition-duration $transition-timing-linear !default;\r\n\r\n$transition-duration-multiplier: () !default;\r\n$transition-duration-multiplier: (\r\n  fastest:  .45,\r\n  faster:   .6,\r\n  fast:     .85,\r\n  slow:     2,\r\n  slower:   3,\r\n  slowest:  4,\r\n);\r\n\r\n$sizes-percents: () !default;\r\n$sizes-percents: (\r\n  10:  10%,\r\n  20:  20%,\r\n  25:  25%,\r\n  30:  30%,\r\n  33:  33.333%,\r\n  40:  40%,\r\n  50:  50%,\r\n  60:  60%,\r\n  66:  66.666%,\r\n  70:  70%,\r\n  75:  75%,\r\n  80:  80%,\r\n  90:  90%,\r\n  100:  100%,\r\n  auto:  auto,\r\n);\r\n\r\n//\r\n// Z-index\r\n//\r\n\r\n$zindex: () !default;\r\n$zindex: (\r\n  n2: -2,\r\n  n1: -1,\r\n  0:  0,\r\n  1:  1,\r\n  2:  2,\r\n);\r\n\r\n//\r\n// ------------------------------------------------------------------------\r\n// EFFECTS\r\n// ------------------------------------------------------------------------\r\n//\r\n\r\n//\r\n// ------------------------------------------------------------------------\r\n// Blur\r\n// ------------------------------------------------------------------------\r\n//\r\n\r\n$blur-values: (\r\n  no: 0rem,\r\n  xs:   0.25rem,\r\n  sm:   0.5rem,\r\n  md:   1rem,\r\n  lg:   2rem,\r\n  xl:   4rem,\r\n);\r\n\r\n//\r\n// ------------------------------------------------------------------------\r\n// Push & Pull (translate)\r\n// ------------------------------------------------------------------------\r\n//\r\n\r\n$push-pull-values: (\r\n  xs:   0.25rem,\r\n  sm:   1rem,\r\n  md:   2rem,\r\n  lg:   5rem,\r\n  xl:   8rem,\r\n  full: 100%,\r\n  half: 50%,\r\n);\r\n\r\n$CSS_PROPERTIES: [];\r\n\r\n:root {\r\n  --tor-predefined-values:  #{str-replace(#{map-keys(map-collect(\r\n    $all-colors,\r\n    $blur-values,\r\n    $push-pull-values,\r\n    (\r\n      risen: risen,\r\n      pop: pop,\r\n      fastest: fastest,\r\n      faster: faster,\r\n      fast: fast,\r\n      slow: slow,\r\n      slower: slower,\r\n      slowest: slowest,\r\n    ),\r\n  ))}, \" \", \"\")};\r\n}\r\n","// Utility generator\n// Used to generate utilities & print utilities\n@mixin generate-utility($utility, $infix, $is-rfs-media-query: false) {\n  $values: map-get($utility, values);\n\n  // If the values are a list or string, convert it into a map\n  @if type-of($values) == \"string\" or type-of(nth($values, 1)) != \"list\" {\n    $values: zip($values, $values);\n  }\n\n  @each $key, $value in $values {\n    $properties: map-get($utility, property);\n\n    // Multiple properties are possible, for example with vertical or horizontal margins or paddings\n    @if type-of($properties) == \"string\" {\n      $properties: append((), $properties);\n    }\n\n    // Use custom class if present\n    $property-class: if(map-has-key($utility, class), map-get($utility, class), nth($properties, 1));\n    $property-class: if($property-class == null, \"\", $property-class);\n\n    // State params to generate pseudo-classes\n    $state: if(map-has-key($utility, state), map-get($utility, state), ());\n\n    $infix: if($property-class == \"\" and str-slice($infix, 1, 1) == \"-\", str-slice($infix, 2), $infix);\n\n    // Don't prefix if value key is null (eg. with shadow class)\n    $property-class-modifier: if($key, if($property-class == \"\" and $infix == \"\", \"\", \"-\") + $key, \"\");\n\n    @if map-get($utility, rfs) {\n      // Inside the media query\n      @if $is-rfs-media-query {\n        $val: rfs-value($value);\n\n        // Do not render anything if fluid and non fluid values are the same\n        $value: if($val == rfs-fluid-value($value), null, $val);\n      }\n      @else {\n        $value: rfs-fluid-value($value);\n      }\n    }\n\n    $is-rtl: map-get($utility, rtl);\n\n    @if $value != null {\n      @if $is-rtl == false {\n        /* rtl:begin:remove */\n      }\n      .#{$property-class + $infix + $property-class-modifier} {\n        @each $property in $properties {\n          #{$property}: $value if($enable-important-utilities, !important, null);\n        }\n      }\n\n      @each $pseudo in $state {\n        .#{$property-class + $infix + $property-class-modifier}-#{$pseudo}:#{$pseudo} {\n          @each $property in $properties {\n            #{$property}: $value if($enable-important-utilities, !important, null);\n          }\n        }\n      }\n      @if $is-rtl == false {\n        /* rtl:end:remove */\n      }\n    }\n  }\n}\n","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @if not $n {\n    @error \"breakpoint `#{$name}` not found in `#{$breakpoints}`\";\n  }\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width.\n// The maximum value is reduced by 0.02px to work around the limitations of\n// `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $max: map-get($breakpoints, $name);\n  @return if($max and $max > 0, $max - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min:  breakpoint-min($name, $breakpoints);\n  $next: breakpoint-next($name, $breakpoints);\n  $max:  breakpoint-max($next);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($next, $breakpoints) {\n      @content;\n    }\n  }\n}\n","//\n// ------------------------------------------------------------------------\n// Position\n// ------------------------------------------------------------------------\n//\n\n$utilities: (\n  \"position\": (\n    property: position,\n    responsive: true,\n    values: absolute relative fixed,\n  ),\n);\n\n@import \"../../bootstrap/utilities/call-utilities-api\";\n\n.position-fixed {\n  position: fixed !important;\n}\n\n[data-tor]{\n  --tor-top: auto;\n  --tor-right: auto;\n  --tor-bottom: auto;\n  --tor-left: auto;\n  --tor-shift-x: 0%;\n  --tor-shift-y: 0%;\n\n  // --tor-add-shift-* is additional element transform. Used in .modal transitions for example.\n  --tor-add-shift-x: 0%;\n  --tor-add-shift-y: 0%;\n}\n\n[data-tor~=\"top\"] {\n  --tor-top: 0;\n}\n[data-tor~=\"bottom\"] {\n  --tor-bottom: 0;\n}\n[data-tor~=\"left\"] {\n  --tor-left: 0;\n}\n[data-tor~=\"right\"] {\n  --tor-right: 0;\n}\n\n[data-tor~=\"middle\"] {\n  --tor-top: 50%;\n  --tor-shift-y: -50% !important;\n}\n[data-tor~=\"center\"] {\n  --tor-left: 50%;\n  --tor-shift-x: -50% !important;\n}\n\n[data-tor] {\n  top: var(--tor-top);\n  right: var(--tor-right);\n  bottom: var(--tor-bottom);\n  left: var(--tor-left);\n  --tor-moveX: calc(var(--tor-shift-x, 0) + var(--tor-add-shift-x, 0)) !important;\n  --tor-moveY: calc(var(--tor-shift-y, 0) + var(--tor-add-shift-y, 0)) !important;\n}\n\n[data-tor~=\"middle\"]:not([data-fx]),\n[data-tor~=\"center\"]:not([data-fx]) {\n  transform: translateX( var(--tor-moveX) ) translateY( var(--tor-moveY) ) !important;\n}\n\n//\n// ------------------------------------------------------------------------\n// Push\n// ------------------------------------------------------------------------\n//\n\n$push-directions: (\n  \"right\": x,\n  \"left\":  x,\n  \"up\":    y,\n  \"down\":  y\n);\n\n[data-tor-push] {\n  --tor-push-x: 0%;\n  --tor-push-y: 0%;\n}\n\n[data-tor-push*=\"up\"] {\n  --tor-push-y-direction: -1;\n}\n[data-tor-push*=\"left\"] {\n  --tor-push-x-direction: -1;\n}\n\n// @each $percents-property, $percents-value  in $push-percents {\n//   @each $directions-property, $directions-value in $push-directions {\n//     [data-tor-push~=\"#{$directions-property}(#{$percents-property})\"] {\n//       @if $directions-property == \"up\" or $directions-property == \"left\" {\n//         --tor-push-#{$directions-value}: -#{$percents-property}#{\"%\"};\n//       } @else {\n//         --tor-push-#{$directions-value}: #{$percents-property}#{\"%\"};\n//       }\n//     }\n//   }\n// }\n\n[data-tor-push] {\n  --tor-moveX: calc( (var(--tor-push-x, 0%) * var(--tor-push-x-direction, 1)) + var(--tor-shift-x, 0%) ) !important;\n  --tor-moveY: calc( (var(--tor-push-y, 0%) * var(--tor-push-y-direction, 1)) + var(--tor-shift-y, 0%) ) !important;\n\n  &:not([data-tor-fx]) {\n    transform: translateX( var(--tor-moveX) ) translateY( var(--tor-moveY) ) !important;\n  }\n}\n","//\n// ------------------------------------------------------------------------\n// Resolution\n//\n// Utility for JS to determinate current @media resolution\n// ------------------------------------------------------------------------\n//\n\n$resolutions: (\n  xxl: map-get($grid-breakpoints, xxl),\n  xl: map-get($grid-breakpoints, xl),\n  lg: map-get($grid-breakpoints, lg),\n  md: map-get($grid-breakpoints, md),\n  sm: map-get($grid-breakpoints, sm),\n  all: 0px,\n);\n\n\n$root-resolutions: null;\n\n@each $name, $width in $resolutions {\n  $root-resolutions: append($root-resolutions, \"#{$name}:#{$width}\", comma);\n}\n\n:root {\n  --tor-resolutions: #{quote($root-resolutions)};\n}","[data-tor] {\n  --tor-wait: 0ms;\n  --tor-delay: 0ms;\n  --tor-duration: #{$transition-duration};\n  --tor-speed: 1;\n  --tor-timing: #{$transition-timing};\n\n  --tor-duration-all: calc( var(--tor-duration, #{$transition-duration}) * var(--tor-speed) );\n  --tor-timing-all: var(--tor-timing);\n  --tor-delay-all: calc( var(--tor-wait, 0ms) + var(--tor-delay, 0ms) );\n  --tor-property-all: all;\n\n  --tor-originX: center;\n  --tor-originY: center;\n  --tor-originZ: 0px;\n\n  transition-property: var(--tor-property-all);\n  transition-timing-function: var(--tor-timing-all);\n  transition-duration: var(--tor-duration-all);\n  transition-delay: var(--tor-delay-all);\n\n  transform-origin: var(--tor-originX) var(--tor-originY) var(--tor-originZ);\n}\n\n[data-tor*=\"z-level\"],\n[data-tor*=\"push.\"],\n[data-tor*=\"pull.\"],\n[data-tor*=\"translate\"],\n[data-tor*=\"rotate\"],\n[data-tor*=\"scale\"],\n[data-tor*=\"skew\"],\n[data-tor*=\"reveal\"] {\n  --tor-scaleX: initial;\n  --tor-scaleY: initial;\n\n  --tor-skewX: initial;\n  --tor-skewY: initial;\n\n  --tor-rotate: initial;\n  --tor-rotateX: initial;\n  --tor-rotateY: initial;\n\n  --tor-translateX: initial;\n  --tor-translateY: initial;\n  --tor-translateZ: initial;\n  --tor-moveX: initial;\n  --tor-moveY: initial;\n  --tor-z-level: initial;\n  --tor-perspective-self: initial;\n\n  transform:\n    perspective(\n      var(--tor-perspective-self, 0px)\n    )\n\n    scale3d(\n      var(--tor-scaleX, var(--tor-scale, 1)),\n      var(--tor-scaleY, var(--tor-scale, 1)),\n      1\n    )\n\n    translate3d(\n      calc( var(--tor-translateX, 0%) + var(--tor-moveX, 0%) ),\n      calc( var(--tor-translateY, 0%) + var(--tor-moveY, 0%) ),\n      calc( var(--tor-translateZ, 0px) + var(--tor-z-level, 0px) + var(--moz-opacity-fix, 0px) )\n    )\n\n    rotateX(\n      var(--tor-rotateX, 0deg)\n    )\n    rotateY(\n      var(--tor-rotateY, 0deg)\n    )\n    rotateZ(\n      var(--tor-rotate, 0deg)\n    )\n\n    skew(\n      var(--tor-skewX, var(--tor-skew, 0deg)),\n      var(--tor-skewY, var(--tor-skewY, 0deg))\n    )\n  ;\n}\n\n// [data-tor]:hover,\n// [data-tor].active,\n// [data-tor].show,\n// [data-tor].inview {\n//   will-change: transform, opacity;\n// }\n\n[data-tor*=\"scroll:\"],\n[data-tor*=\"mouse:\"],\n[data-tor*=\"mouseX:\"],\n[data-tor*=\"mouseY:\"],\n[data-tor*=\"sensor:\"],\n[data-tor*=\"sensorX:\"],\n[data-tor*=\"sensorY:\"] {\n  transition: none;\n  // transition-timing-function: none;\n  // transition-duration: 0ms;\n  // --tor-timing: unset;\n  // --tor-duration: 0ms;\n  // --tor-speed: 0;\n}\n\n//\n// ------------------------------------------------------------------------\n// Transform origin\n// ------------------------------------------------------------------------\n//\n\n[data-tor~=\"origin.left\"] {\n  --tor-originX: left;\n}\n[data-tor~=\"origin.right\"] {\n  --tor-originX: right;\n}\n[data-tor~=\"origin.top\"] {\n  --tor-originY: top;\n}\n[data-tor~=\"origin.bottom\"] {\n  --tor-originY: bottom;\n}\n\n//\n// ------------------------------------------------------------------------\n// SVG\n// ------------------------------------------------------------------------\n//\n\nsvg [data-tor] {\n  transform-box: fill-box;\n}\n\n//\n// ------------------------------------------------------------------------\n// Ghost element\n// ------------------------------------------------------------------------\n//\n\n[data-tor*=\":rotate.\"],\n[data-tor*=\":pull.\"],\n[data-tor*=\":push.\"] {\n  > .tor-hit-area {\n    content: \"\";\n    position: absolute;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    transform: translateX(calc(var(--tor-translateX, 0%) * -1)) translateY(calc(var(--tor-translateY, 0%) * -1));\n    transition: inherit;\n    pointer-events: none;\n    z-index: -1;\n  }\n\n  &:hover {\n    > .tor-hit-area {\n      transition: inherit;\n      pointer-events: auto;\n    }\n  }\n}\n\n[data-tor*=\":push.\"],\n[data-tor*=\":pull.\"] {\n  &:hover {\n    > .tor-hit-area {\n      height: calc(var(--tor-translateY, 100%) * var(--tor-hitY-calc, 1) + 100%);\n      width: calc(var(--tor-translateX, 100%) * var(--tor-hitX-calc, 1) + 100%);\n    }\n  }\n}\n\n[data-tor*=\":push.up\"],\n[data-tor*=\":pull.up\"] {\n  > .tor-hit-area {\n    bottom: 0;\n    --tor-hitY-calc: -1;\n  }\n}\n\n[data-tor*=\":push.down\"],\n[data-tor*=\":pull.down\"] {\n  > .tor-hit-area {\n    top: 0;\n  }\n}\n\n[data-tor*=\":push.left\"],\n[data-tor*=\":pull.left\"] {\n  > .tor-hit-area {\n    left: initial;\n    right: 0;\n    --tor-hitX-calc: -1;\n  }\n}\n\n//\n// ------------------------------------------------------------------------\n// Helpers\n// ------------------------------------------------------------------------\n//\n\n//\n// Remove default transition. You can than override it with `data-tor` transition type\n//\n\n.transition-unset {\n  transition: unset !important;\n}\n\n.tor-hidden {\n  visibility: hidden !important;\n}\n\n//\n// Disable transition for .inview elements\n//\n\n[data-tor-parent~=\"inview\"]:not(.inview) [data-tor*=\"inview(\"],\n[data-tor*=\"inview:\"]:not(.inview) {\n  transition: none !important;\n}\n\n//\n// Make <span> `inline-block` so transforms can apply\n//\n\nspan[data-tor] {\n  display: inline-block;\n}\n\n//\n// Parent perspective\n//\n\n.perspective {\n  perspective: 1000px;\n\n  [data-fx] {\n    --perspective-c: 0;\n  }\n}\n\n.preserve-3d {\n  transform-style: preserve-3d;\n}\n\n//\n// Backface visibility\n//\n\n[data-fx~=\"backface-hidden\"],\n.backface-hidden {\n  backface-visibility: hidden;\n}\n\n//\n// Disable transform\n//\n\n.no-transform,\n[data-fx~=\"no-transform\"] {\n  transform: none !important;\n}\n\n//\n// Disable transition\n//\n\n.tr-none {\n  transition: none !important;\n}\n\n//\n// ------------------------------------------------------------------------\n// Hacks\n// ------------------------------------------------------------------------\n//\n\n//\n// Firefox smooth edge fixes\n//\n\n@-moz-document url-prefix() {\n  [data-tor*=\"@transform\"],\n  [data-tor*=\"reveal\"],\n  [data-tor*=\"rotate\"],\n  [data-tor*=\"rotate\"] .tor-flip-front,\n  [data-tor*=\"rotate\"] .tor-flip-back {\n    outline: 1px solid transparent;\n  }\n\n  [data-tor*=\"scale\"],\n  [data-tor*=\"pull\"],\n  [data-tor*=\"push\"] {\n    transform-style: preserve-3d;\n    backface-visibility: hidden;\n  }\n\n  img[data-tor*=\"scale\"],\n  img[data-tor*=\"pull\"],\n  img[data-tor*=\"push\"] {\n    rotate: 0deg;\n    image-rendering: optimizeQuality;\n  }\n\n  svg[data-tor] {\n    outline: none;\n    rotate: 0;\n  }\n\n  svg [data-tor] {\n    rotate: 0.02deg;\n    will-change: transform;\n  }\n}\n","[data-tor~=\"quad\"] {\n  transition-duration: #{$transition-duration-quad} !important;\n  transition-timing-function: #{$transition-timing-quad} !important;\n  // --tor-duration: #{$transition-duration-quad} !important;\n  // --tor-timing: #{$transition-timing-quad} !important;\n}\n[data-tor~=\"exponential\"] {\n  transition-duration: #{$transition-duration-exponential} !important;\n  transition-timing-function: #{$transition-timing-exponential} !important;\n  // --tor-duration: #{$transition-duration-exponential} !important;\n  // --tor-timing: #{$transition-timing-exponential} !important;\n}\n[data-tor~=\"bounce\"] {\n  transition-duration: #{$transition-duration-bounce} !important;\n  transition-timing-function: #{$transition-timing-bounce} !important;\n  // --tor-duration: #{$transition-duration-bounce} !important;\n  // --tor-timing: #{$transition-timing-bounce} !important;\n}\n[data-tor~=\"bounce-exponential\"] {\n  transition-duration: #{$transition-duration-exponential} !important;\n  transition-timing-function: #{$transition-timing-bounce-exponential} !important;\n  // --tor-duration: #{$transition-duration-exponential} !important;\n  // --tor-timing: #{$transition-timing-bounce-exponential} !important;\n}\n[data-tor~=\"linear\"] {\n  transition-duration: #{$transition-duration} !important;\n  transition-timing-function: #{$transition-timing-linear} !important;\n  // --tor-duration: #{$transition-duration} !important;\n  // --tor-timing: #{$transition-timing-linear} !important;\n}\n[data-tor~=\"ease-out\"] {\n  transition-duration: #{$transition-duration-ease-out} !important;\n  transition-timing-function: #{$transition-timing-ease-out} !important;\n  // --tor-duration: #{$transition-duration-ease-out} !important;\n  // --tor-timing: #{$transition-timing-ease-out} !important;\n}","@each $multiplier, $multiplier-value in $transition-duration-multiplier {\n  [data-tor~=\"#{$multiplier}\"] {\n    --tor-speed: #{$multiplier-value};\n  }\n}\n\n[data-tor*=\"loop:\"] {\n  @each $multiplier, $multiplier-value in $transition-duration-multiplier {\n    --tor-#{$multiplier}: #{$multiplier-value};\n  }\n}","//\n// ------------------------------------------------------------------------\n// Background color\n// ------------------------------------------------------------------------\n//\n\n[data-tor*=\"bg(\"] {\n  --tor-bg-opacity: 1;\n  --tor-bg-lightness: 1;\n\n  @each $name, $value in $bg-colors-hsla {\n    --tor-bg-#{$name}: #{$value};\n  }\n  --tor-bg-transparent: transparent;\n}\n\n//\n// ------------------------------------------------------------------------\n// Lighten\n// ------------------------------------------------------------------------\n//\n\n[data-tor*=\"bg-lighten(\"] {\n  @each $variant, $value in $color-shading {\n    --tor-bg-lighten-#{$variant}: #{1 + $value};\n  }\n}\n\n//\n// ------------------------------------------------------------------------\n// Darken\n// ------------------------------------------------------------------------\n//\n\n[data-tor*=\"bg-darken(\"] {\n  @each $variant, $value in $color-shading {\n    --tor-bg-darken-#{$variant}: #{1 - $value};\n  }\n}","//\n// ------------------------------------------------------------------------\n// Block\n// ------------------------------------------------------------------------\n//\n\n[data-tor*=\"block(\"] {\n  // --tor-clip-delay: calc(var(--tor-duration-all) + var(--tor-delay-all, 0ms));\n  // --tor-block-delay: var(--tor-delay-all, 0ms);\n  // --tor-block: inset(0% 0% 0% 0%);\n\n  --tor-block: inset(0% 0% 0% 0%);\n  --tor-block-scale: var(--tor-block-scale-idle);\n  --tor-clip-delay: var(--tor-delay-all, 0ms);\n  --tor-block-delay: calc(var(--tor-duration-all) + var(--tor-delay-all, 0ms));\n\n  clip-path: var(--tor-block);\n  contain: paint;\n  transform-style: preserve-3d;\n  will-change: clip-path, transform;\n  position: relative;\n  transition-delay: var(--tor-clip-delay) !important;\n  visibility: visible;\n\n  @-moz-document url-prefix() {\n    filter: drop-shadow($shadow-transparent);\n  }\n\n  &:before {\n    background-color: var(--tor-block-bg, $black);\n    content: \"\";\n    position: absolute;\n    top: 0;\n    left: 0;\n    height: 100%;\n    width: 100%;\n    transform: var(--tor-block-scale);\n    transition-delay: var(--tor-block-delay);\n    transition-duration: var(--tor-duration-all);\n    transition-timing-function: inherit;\n    transform-origin: var(--tor-block-origin);\n    transition-property: transform;\n    z-index: 1;\n  }\n}\n\n//\n// ------------------------------------------------------------------------\n// Inactive\n// ------------------------------------------------------------------------\n//\n\n// Common\n\n[data-tor*=\":block(right\"],\n[data-tor*=\":block(left\"] {\n  --tor-block-scale: scaleX(0);\n  --tor-block-scale-idle: scaleX(1);\n}\n\n[data-tor*=\":block(up\"],\n[data-tor*=\":block(down\"] {\n  --tor-block-scale: scaleY(0);\n  --tor-block-scale-idle: scaleY(1);\n}\n\n// Different\n\n[data-tor*=\":block(right\"] {\n  --tor-block-origin: right;\n  --tor-block-idle: inset(0% 100% 0% 0%);\n}\n[data-tor*=\":block(left\"] {\n  --tor-block-origin: left;\n  --tor-block-idle: inset(0% 0% 0% 100%);\n}\n\n[data-tor*=\":block(up\"] {\n  --tor-block-origin: top;\n  --tor-block-idle: inset(100% 0% 0% 0%);\n}\n[data-tor*=\":block(down\"] {\n  --tor-block-origin: bottom;\n  --tor-block-idle: inset(0% 0% 100% 0%);\n}\n\n//\n// ------------------------------------------------------------------------\n// Active\n// ------------------------------------------------------------------------\n//\n\n// [data-tor*=\"inview:block(\"].inview,\n// [data-tor*=\"active:block(\"].active,\n// [data-tor*=\"show:block(\"].show,\n// [data-tor*=\"hover:block(\"]:hover {\n//   --tor-block-scale: var(--tor-block-scale-a);\n//   --tor-clip-delay: var(--tor-delay-all, 0ms);\n//   --tor-block-delay: calc(var(--tor-duration-all) + var(--tor-delay-all, 0ms));\n//   // clip-path: inset(0% 0% 0% 0%);\n//   // --tor-block: inset(0% 0% 0% 0%);\n// }","//\n// ------------------------------------------------------------------------\n// Blur\n// ------------------------------------------------------------------------\n//\n\n[data-tor*=\"blur(\"],\n[data-tor*=\"blur.\"] {\n  filter: blur(var(--tor-blur, 0));\n\n  @each $key, $value in $blur-values {\n    --tor-blur-#{$key}: #{$value};\n  }\n}","//\n// ------------------------------------------------------------------------\n// Border color\n// ------------------------------------------------------------------------\n//\n\n[data-tor*=\"border(\"] {\n  @each $name, $value in $border-colors-hsla {\n    --tor-border-#{$name}: #{$value};\n  }\n  --tor-border-transparent: transparent;\n  --tor-border-opacity: 1;\n}","//\n// ------------------------------------------------------------------------\n// Fade & Opacity\n// ------------------------------------------------------------------------\n//\n\n[data-tor*=\"opacity\"],\n[data-tor*=\"fade.\"] {\n  opacity: var(--tor-opacity);\n}\n\n// [data-tor*=\"fade.in\"] {\n//   --tor-opacity: 0;\n// }","//\n// ------------------------------------------------------------------------\n// Mask\n// ------------------------------------------------------------------------\n//\n\n[data-tor*=\":mask(\"] {\n  clip-path: polygon(var(--tor-mask));\n  contain: paint;\n  backface-visibility: hidden;\n  will-change: clip-path;\n\n  @-moz-document url-prefix() {\n    filter: drop-shadow($shadow-transparent);\n  }\n}\n\n[data-tor*=\":mask(circle\"] {\n  clip-path: circle(var(--tor-mask));\n}\n\n//\n// ------------------------------------------------------------------------\n// CSS variables\n// ------------------------------------------------------------------------\n//\n\n[data-tor*=\":mask(\"] {\n  --tor-mask-skew: 0rem;\n\n  // Active\n\n  --tor-mask-left: calc(0% - var(--tor-mask-skew)) 0%, 100% 0%, 100% 100%, 0% 100%;\n  --tor-mask-right: 0% 0%, calc(100% + var(--tor-mask-skew)) 0%, 100% 100%, 0% 100%;\n  --tor-mask-up: 0% 0%, 100% calc(0% - var(--tor-mask-skew)), 100% 100%, 0% 100%;\n  --tor-mask-down: 0% 0%, 100% 0%, 100% calc(100% + var(--tor-mask-skew)), 0% 100%;\n  --tor-mask-circle: 100%;\n}\n\n//\n// ------------------------------------------------------------------------\n// Inactive\n// ------------------------------------------------------------------------\n//\n\n[data-tor*=\":mask(left\"] {\n  --tor-mask-a: var(--tor-mask-left);\n  --tor-mask: 100% 0%, 100% 0%, 100% 100%, calc(100% + var(--tor-mask-skew)) 100%;\n}\n[data-tor*=\":mask(right\"] {\n  --tor-mask-a: var(--tor-mask-right);\n  --tor-mask: 0% 0%, 0% 0%, calc(0% - var(--tor-mask-skew)) 100%, 0% 100%;\n}\n[data-tor*=\":mask(up\"] {\n  --tor-mask-a: var(--tor-mask-up);\n  --tor-mask: 0% calc(100% + var(--tor-mask-skew)), 100% 100%, 100% 100%, 0% 100%;\n}\n[data-tor*=\":mask(down\"] {\n  --tor-mask-a: var(--tor-mask-down);\n  --tor-mask: 0% 0%, 100% 0%, 100% 0%, 0% calc(0% - var(--tor-mask-skew));\n}\n\n[data-tor*=\":mask(circle\"] {\n  --tor-mask-a: var(--tor-mask-circle);\n  --tor-mask: 0%;\n}","//\n// ------------------------------------------------------------------------\n// Push & Pull\n// ------------------------------------------------------------------------\n//\n\n[data-tor*=\"push.\"],\n[data-tor*=\"pull.\"] {\n  @each $key, $value in $push-pull-values {\n    --tor-push-pull-#{$key}: #{$value};\n  }\n}","//\n// ------------------------------------------------------------------------\n// Reveal\n// ------------------------------------------------------------------------\n//\n\n[data-tor*=\":reveal.hide(\"],\n[data-tor*=\":reveal(\"] {\n  clip-path: var(--tor-reveal);\n  backface-visibility: hidden;\n  transform-style: preserve-3d;\n  contain: paint;\n  will-change: transform;\n  // transition-property: clip-path, transform;\n  // transition-delay: calc(var(--tor-delay) -19ms), var(--tor-delay);\n  transition-delay: calc(var(--tor-delay) + 100ms);\n}\n\nspan[data-tor*=\":reveal(\"] {\n  display: inline-block;\n}\n\n//\n// ------------------------------------------------------------------------\n// CSS variables\n// ------------------------------------------------------------------------\n//\n\n[data-tor*=\":reveal(\"] {\n\n  // Active\n\n  --tor-reveal: inset(0% 0% 0% 0%);\n  --tor-translateY: 0%;\n  --tor-translateX: 0%;\n}\n\n[data-tor*=\":reveal.hide(\"] {\n\n  // Active\n\n  --tor-reveal: inset(0% 0% 0% 0%);\n  --tor-translateY: 0%;\n  --tor-translateX: 0%;\n}\n\n//\n// ------------------------------------------------------------------------\n// Inactive\n// ------------------------------------------------------------------------\n//\n\n\n[data-tor*=\":reveal(up\"] {\n  --tor-reveal-idle: inset(0% 0% 99.999% 0%);\n  --tor-translateY-idle: 100%;\n}\n[data-tor*=\":reveal(down\"] {\n  --tor-reveal-idle: inset(99.999% 0% 0% 0%);\n  --tor-translateY-idle: -100%;\n}\n[data-tor*=\":reveal(right\"] {\n  --tor-reveal-idle: inset(0% 0% 0% 99.999%);\n  --tor-translateX-idle: -100%;\n}\n[data-tor*=\":reveal(left\"] {\n  --tor-reveal-idle: inset(0% 99.999% 0% 0%);\n  --tor-translateX-idle: 100%;\n}\n\n// Hide\n\n[data-tor*=\":reveal.hide(down\"] {\n  --tor-reveal-idle: inset(0% 0% 100% 0%);\n  --tor-translateY-idle: 100%;\n}\n[data-tor*=\":reveal.hide(up\"] {\n  --tor-reveal-idle: inset(100% 0% 0% 0%);\n  --tor-translateY-idle: -100%;\n}\n[data-tor*=\":reveal.hide(left\"] {\n  --tor-reveal-idle: inset(0% 0% 0% 100%);\n  --tor-translateX-idle: -100%;\n}\n[data-tor*=\":reveal.hide(right\"] {\n  --tor-reveal-idle: inset(0% 100% 0% 0%);\n  --tor-translateX-idle: 100%;\n}","//\n// ------------------------------------------------------------------------\n// Shadows\n// ------------------------------------------------------------------------\n//\n\n$shadow-variants: map-get($map: return-utility-map(\"shadow\"), $key: values);\n$svg-shadow-variants: map-get($map: return-utility-map(\"svg-shadow\"), $key: values);\n\n[data-tor*=\"shadow(\"] {\n  --tor-shadow-inset: var(--tor-none, /*!*/);\n  --tor-shadow-color: #{red($black)}, #{green($black)}, #{blue($black)};\n  --tor-shadow-offsetX: 0rem;\n  --tor-shadow-offsetY: 0rem;\n  --tor-shadow-intensity: 1;\n}\n\n[data-tor*=\"shadow(\"] {\n  @each $key, $value in $shadow-variants {\n\n    @if $key == null {\n      $key: md;\n    }\n\n    --tor-shadow-#{$key}: #{$value};\n  }\n}\n\n//\n// ------------------------------------------------------------------------\n// Shadow offset\n// ------------------------------------------------------------------------\n//\n\n[data-tor*=\"shadow-offset\"] {\n  @each $name, $value in $shadow-offset {\n    --tor-shadow-offset-#{$name}: #{$value};\n  }\n}\n\n//\n// ------------------------------------------------------------------------\n// Shadow intensity\n// ------------------------------------------------------------------------\n//\n\n[data-tor*=\"shadow-intensity(\"] {\n  @each $name, $value in $shadow-intensity {\n    --tor-shadow-intensity-#{$name}: #{$value};\n  }\n}","//\n// ------------------------------------------------------------------------\n// Text color\n// ------------------------------------------------------------------------\n//\n\n[data-tor*=\"text(\"] {\n  @each $name, $value in $text-colors-hsla {\n    --tor-text-#{$name}: #{$value};\n  }\n  --tor-text-transparent: transparent;\n}","//\n// ------------------------------------------------------------------------\n// Rotate perspective\n// ------------------------------------------------------------------------\n//\n\n[data-tor*=\"rotateY.\"],\n[data-tor*=\"rotateX.\"] {\n  --tor-perspective-self: 1000px;\n  transform-style: preserve-3d;\n}","[data-tor*=\"loop:\"],\n[data-tor-loop] {\n  --tor-loop-duration: 1000ms;\n  --tor-loop-timing: ease-in-out;\n  --tor-loop-direction: normal;\n  --tor-loop-speed: 1;\n\n  animation-iteration-count: infinite;\n\n  will-change: transform;\n\n  @-moz-document url-prefix() {\n    rotate: 0.02deg;\n    outline: 1px solid transparent;\n  }\n}\n\n[data-tor*=\":move\"] {\n  position: absolute;\n}\n\n[data-tor*=\"loop:bg\"],\n[data-tor*=\"loop:sm::bg\"],\n[data-tor*=\"loop:md::bg\"],\n[data-tor*=\"loop:lg::bg\"],\n[data-tor*=\"loop:xl::bg\"],\n[data-tor*=\"loop:xxl::bg\"] {\n  --tor-loop-bg-start: var(--tor-loop-bg-value-start, #{$primary});\n  --tor-loop-bg-end: var(--tor-loop-bg-value, #{$secondary});\n}\n\n[data-tor*=\":fill\"] {\n  --tor-loop-fill-start: var(--tor-loop-fill-value-start, #{$primary});\n  --tor-loop-fill-end: var(--tor-loop-fill-value, #{$secondary});\n}","//\n// ------------------------------------------------------------------------\n// Animation keyframes\n// ------------------------------------------------------------------------\n//\n\n@keyframes loop-blink {\n  0% {\n    opacity: 1;\n  }\n  50% {\n    opacity: var(--tor-loop-blink-value);\n  }\n  100% {\n    opacity: 1;\n  }\n}\n\n@keyframes loop-circle {\n  0%{\n    transform: rotate(0deg) translateX( var(--tor-loop-circle-value) ) rotate(0deg);\n  }\n  100%{\n    transform: rotate(360deg) translateX( var(--tor-loop-circle-value) ) rotate(-360deg);\n  }\n}\n\n@keyframes loop-float {\n  0% {\n    transform: translateY(0rem);\n  }\n  100% {\n    transform: translateY(var(--tor-loop-float-value));\n  }\n}\n\n@keyframes loop-jump {\n  0% {\n    transform: translateY(0rem);\n  }\n  50% {\n    transform: translateY( calc(var(--tor-loop-jump-value) * -1) );\n  }\n  65% {\n    transform: translateY(0rem);\n  }\n  70% {\n    transform: translateY( calc( var(--tor-loop-jump-value)  * -0.2) );\n  }\n  90% {\n    transform: translateY(0rem);\n  }\n  100% {\n    transform: translateY(0rem);\n  }\n}\n\n@keyframes loop-pulse {\n  0% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale( var(--tor-loop-pulse-value) );\n  }\n  100% {\n    transform: scale(1);\n  }\n}\n\n@keyframes loop-radiate {\n  0% {\n    box-shadow: 0 0 0 0rem var(--tor-loop-color-0);\n  }\n  100% {\n    box-shadow: 0 0 0 var(--tor-loop-radiate-value) var(--tor-loop-color-100);\n  }\n}\n\n@keyframes loop-spin {\n  0% {\n    transform: rotateZ(0deg);\n  }\n  100% {\n    transform: rotateZ(var(--tor-loop-spin-value));\n  }\n}\n\n@keyframes loop-swing {\n  0% {\n    transform: rotateZ(var(--tor-loop-swing-value));\n  }\n  50% {\n    transform: rotateZ( calc( var(--tor-loop-swing-value) * (-1) ) );\n  }\n  100% {\n    transform: rotateZ(var(--tor-loop-swing-value));\n  }\n}\n\n@keyframes loop-wobble-h {\n  0% {\n    transform: translateX(calc( var(--tor-loop-wobble-h-value) * 0.5 ));\n  }\n  100% {\n    transform: translateX(calc( var(--tor-loop-wobble-h-value) * -0.5 ));\n  }\n}\n\n@keyframes loop-wobble-v {\n  0% {\n    transform: translateY(calc( var(--tor-loop-wobble-v-value) * 0.5 ));\n  }\n  100% {\n    transform: translateY(calc( var(--tor-loop-wobble-v-value) * -0.5 ));\n  }\n}\n\n@keyframes loop-move-right {\n  0% {\n    left: 0%;\n    transform: translateX(-100%);\n  }\n  // Safari flicker hack\n  99% {\n    visibility: hidden;\n    left: 100%;\n    transform: translateX(0%);\n  }\n  100% {\n    visibility: hidden;\n    left: 100%;\n    transform: translateX(0%);\n  }\n}\n\n@keyframes loop-move-left {\n  0% {\n    right: 0%;\n    transform: translateX(100%);\n  }\n  99% {\n    visibility: hidden;\n    right: 100%;\n    transform: translateX(0%);\n  }\n  100% {\n    visibility: hidden;\n    right: 100%;\n    transform: translateX(0%);\n  }\n}\n\n@keyframes loop-move-down {\n  0% {\n    top: 0%;\n    transform: translateY(-100%);\n  }\n  99% {\n    visibility: hidden;\n    top: 100%;\n    transform: translateY(0%);\n  }\n  100% {\n    visibility: hidden;\n    top: 0%;\n    transform: translateY(0%);\n  }\n}\n\n@keyframes loop-move-up {\n  0% {\n    bottom: 0%;\n    transform: translateY(100%);\n  }\n  99% {\n    visibility: hidden;\n    bottom: 100%;\n    transform: translateY(0%);\n  }\n  100% {\n    visibility: hidden;\n    bottom: 100%;\n    transform: translateY(0%);\n  }\n}\n\n@keyframes loop-glow {\n  0%{\n    filter: drop-shadow(0rem 0rem 0rem var(--tor-loop-glow-color, $primary));\n  }\n  50%{\n    filter: drop-shadow(0rem 0rem var(--tor-loop-glow-value) var(--tor-loop-glow-color, $primary));\n  }\n  100%{\n    filter: drop-shadow(0rem 0rem 0rem var(--tor-loop-glow-color, $primary));\n  }\n}\n\n@keyframes loop-bg {\n  0%{\n    background-color: var(--tor-loop-bg-start);\n  }\n  100%{\n    background-color: var(--tor-loop-bg-end);\n  }\n}\n\n@keyframes loop-fill {\n  0%{\n    fill: var(--tor-loop-fill-start);\n  }\n  100%{\n    fill: var(--tor-loop-fill-end);\n  }\n}","@each $variant, $variant-value in $loop-variants {\n  [data-tor*=\"loop:#{$variant}\"] {\n    $name: #{str-replace($variant, \".\", \"-\")};\n\n    --tor-loop-#{$name}-value: #{map-get($variant-value, transform-end-value)};\n\n    @if( map-has-key($variant-value, duration) ) {\n      --tor-loop-#{$name}-duration: #{map-get($variant-value, duration)};\n    } @else {\n      --tor-loop-#{$name}-duration: var(--tor-loop-duration);\n    }\n\n    @if( map-has-key($variant-value, direction) ) {\n      --tor-loop-#{$name}-direction: #{map-get($variant-value, direction)};\n    } @else {\n      --tor-loop-#{$name}-direction: var(--tor-loop-direction);\n    }\n\n    @if( map-has-key($variant-value, timing) ) {\n      --tor-loop-#{$name}-timing: #{map-get($variant-value, timing)};\n    } @else {\n      --tor-loop-#{$name}-timing: var(--tor-loop-timing);\n    }\n\n  }\n}\n\n@each $color, $color-value in $theme-colors {\n  [data-tor*=\":radiate(#{$color}\"] {\n    --tor-loop-color-0: #{rgba($color-value, .8)};\n    --tor-loop-color-100: #{rgba($color-value, 0)};\n  }\n}","[data-tor~=\"quad\"] {\n  --tor-loop-timing: #{$transition-timing-quad} !important;\n}\n[data-tor~=\"exponential\"] {\n  --tor-loop-timing: #{$transition-timing-exponential} !important;\n}\n[data-tor~=\"bounce\"] {\n  --tor-loop-timing: #{$transition-timing-bounce} !important;\n}\n"]}